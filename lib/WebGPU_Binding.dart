// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to WebGPU
class WebGPUBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WebGPUBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WebGPUBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  WGPUInstance wgpuCreateInstance(
    ffi.Pointer<WGPUInstanceDescriptor> descriptor,
  ) {
    return _wgpuCreateInstance(
      descriptor,
    );
  }

  late final _wgpuCreateInstancePtr = _lookup<
      ffi.NativeFunction<
          WGPUInstance Function(
              ffi.Pointer<WGPUInstanceDescriptor>)>>('wgpuCreateInstance');
  late final _wgpuCreateInstance = _wgpuCreateInstancePtr
      .asFunction<WGPUInstance Function(ffi.Pointer<WGPUInstanceDescriptor>)>();

  WGPUProc wgpuGetProcAddress(
    WGPUDevice device,
    ffi.Pointer<ffi.Int8> procName,
  ) {
    return _wgpuGetProcAddress(
      device,
      procName,
    );
  }

  late final _wgpuGetProcAddressPtr = _lookup<
      ffi.NativeFunction<
          WGPUProc Function(
              WGPUDevice, ffi.Pointer<ffi.Int8>)>>('wgpuGetProcAddress');
  late final _wgpuGetProcAddress = _wgpuGetProcAddressPtr
      .asFunction<WGPUProc Function(WGPUDevice, ffi.Pointer<ffi.Int8>)>();

  int wgpuAdapterEnumerateFeatures(
    WGPUAdapter adapter,
    ffi.Pointer<ffi.Int32> features,
  ) {
    return _wgpuAdapterEnumerateFeatures(
      adapter,
      features,
    );
  }

  late final _wgpuAdapterEnumerateFeaturesPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(WGPUAdapter,
              ffi.Pointer<ffi.Int32>)>>('wgpuAdapterEnumerateFeatures');
  late final _wgpuAdapterEnumerateFeatures = _wgpuAdapterEnumerateFeaturesPtr
      .asFunction<int Function(WGPUAdapter, ffi.Pointer<ffi.Int32>)>();

  int wgpuAdapterGetLimits(
    WGPUAdapter adapter,
    ffi.Pointer<WGPUSupportedLimits> limits,
  ) {
    return _wgpuAdapterGetLimits(
      adapter,
      limits,
    );
  }

  late final _wgpuAdapterGetLimitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(WGPUAdapter,
              ffi.Pointer<WGPUSupportedLimits>)>>('wgpuAdapterGetLimits');
  late final _wgpuAdapterGetLimits = _wgpuAdapterGetLimitsPtr.asFunction<
      int Function(WGPUAdapter, ffi.Pointer<WGPUSupportedLimits>)>();

  void wgpuAdapterGetProperties(
    WGPUAdapter adapter,
    ffi.Pointer<WGPUAdapterProperties> properties,
  ) {
    return _wgpuAdapterGetProperties(
      adapter,
      properties,
    );
  }

  late final _wgpuAdapterGetPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUAdapter,
              ffi.Pointer<WGPUAdapterProperties>)>>('wgpuAdapterGetProperties');
  late final _wgpuAdapterGetProperties =
      _wgpuAdapterGetPropertiesPtr.asFunction<
          void Function(WGPUAdapter, ffi.Pointer<WGPUAdapterProperties>)>();

  int wgpuAdapterHasFeature(
    WGPUAdapter adapter,
    int feature,
  ) {
    return _wgpuAdapterHasFeature(
      adapter,
      feature,
    );
  }

  late final _wgpuAdapterHasFeaturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(WGPUAdapter, ffi.Int32)>>(
          'wgpuAdapterHasFeature');
  late final _wgpuAdapterHasFeature =
      _wgpuAdapterHasFeaturePtr.asFunction<int Function(WGPUAdapter, int)>();

  void wgpuAdapterRequestDevice(
    WGPUAdapter adapter,
    ffi.Pointer<WGPUDeviceDescriptor> descriptor,
    WGPURequestDeviceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuAdapterRequestDevice(
      adapter,
      descriptor,
      callback,
      userdata,
    );
  }

  late final _wgpuAdapterRequestDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUAdapter,
              ffi.Pointer<WGPUDeviceDescriptor>,
              WGPURequestDeviceCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuAdapterRequestDevice');
  late final _wgpuAdapterRequestDevice =
      _wgpuAdapterRequestDevicePtr.asFunction<
          void Function(WGPUAdapter, ffi.Pointer<WGPUDeviceDescriptor>,
              WGPURequestDeviceCallback, ffi.Pointer<ffi.Void>)>();

  void wgpuBufferDestroy(
    WGPUBuffer buffer,
  ) {
    return _wgpuBufferDestroy(
      buffer,
    );
  }

  late final _wgpuBufferDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUBuffer)>>(
          'wgpuBufferDestroy');
  late final _wgpuBufferDestroy =
      _wgpuBufferDestroyPtr.asFunction<void Function(WGPUBuffer)>();

  ffi.Pointer<ffi.Void> wgpuBufferGetConstMappedRange(
    WGPUBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpuBufferGetConstMappedRange(
      buffer,
      offset,
      size,
    );
  }

  late final _wgpuBufferGetConstMappedRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              WGPUBuffer, size_t, size_t)>>('wgpuBufferGetConstMappedRange');
  late final _wgpuBufferGetConstMappedRange = _wgpuBufferGetConstMappedRangePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(WGPUBuffer, int, int)>();

  ffi.Pointer<ffi.Void> wgpuBufferGetMappedRange(
    WGPUBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpuBufferGetMappedRange(
      buffer,
      offset,
      size,
    );
  }

  late final _wgpuBufferGetMappedRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              WGPUBuffer, size_t, size_t)>>('wgpuBufferGetMappedRange');
  late final _wgpuBufferGetMappedRange = _wgpuBufferGetMappedRangePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(WGPUBuffer, int, int)>();

  void wgpuBufferMapAsync(
    WGPUBuffer buffer,
    int mode,
    int offset,
    int size,
    WGPUBufferMapCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuBufferMapAsync(
      buffer,
      mode,
      offset,
      size,
      callback,
      userdata,
    );
  }

  late final _wgpuBufferMapAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUBuffer,
              WGPUMapModeFlags,
              size_t,
              size_t,
              WGPUBufferMapCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuBufferMapAsync');
  late final _wgpuBufferMapAsync = _wgpuBufferMapAsyncPtr.asFunction<
      void Function(WGPUBuffer, int, int, int, WGPUBufferMapCallback,
          ffi.Pointer<ffi.Void>)>();

  void wgpuBufferUnmap(
    WGPUBuffer buffer,
  ) {
    return _wgpuBufferUnmap(
      buffer,
    );
  }

  late final _wgpuBufferUnmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUBuffer)>>(
          'wgpuBufferUnmap');
  late final _wgpuBufferUnmap =
      _wgpuBufferUnmapPtr.asFunction<void Function(WGPUBuffer)>();

  WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPUComputePassDescriptor> descriptor,
  ) {
    return _wgpuCommandEncoderBeginComputePass(
      commandEncoder,
      descriptor,
    );
  }

  late final _wgpuCommandEncoderBeginComputePassPtr = _lookup<
          ffi.NativeFunction<
              WGPUComputePassEncoder Function(
                  WGPUCommandEncoder, ffi.Pointer<WGPUComputePassDescriptor>)>>(
      'wgpuCommandEncoderBeginComputePass');
  late final _wgpuCommandEncoderBeginComputePass =
      _wgpuCommandEncoderBeginComputePassPtr.asFunction<
          WGPUComputePassEncoder Function(
              WGPUCommandEncoder, ffi.Pointer<WGPUComputePassDescriptor>)>();

  WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPURenderPassDescriptor> descriptor,
  ) {
    return _wgpuCommandEncoderBeginRenderPass(
      commandEncoder,
      descriptor,
    );
  }

  late final _wgpuCommandEncoderBeginRenderPassPtr = _lookup<
          ffi.NativeFunction<
              WGPURenderPassEncoder Function(
                  WGPUCommandEncoder, ffi.Pointer<WGPURenderPassDescriptor>)>>(
      'wgpuCommandEncoderBeginRenderPass');
  late final _wgpuCommandEncoderBeginRenderPass =
      _wgpuCommandEncoderBeginRenderPassPtr.asFunction<
          WGPURenderPassEncoder Function(
              WGPUCommandEncoder, ffi.Pointer<WGPURenderPassDescriptor>)>();

  void wgpuCommandEncoderClearBuffer(
    WGPUCommandEncoder commandEncoder,
    WGPUBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpuCommandEncoderClearBuffer(
      commandEncoder,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpuCommandEncoderClearBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUCommandEncoder, WGPUBuffer, ffi.Uint64,
              ffi.Uint64)>>('wgpuCommandEncoderClearBuffer');
  late final _wgpuCommandEncoderClearBuffer = _wgpuCommandEncoderClearBufferPtr
      .asFunction<void Function(WGPUCommandEncoder, WGPUBuffer, int, int)>();

  void wgpuCommandEncoderCopyBufferToBuffer(
    WGPUCommandEncoder commandEncoder,
    WGPUBuffer source,
    int sourceOffset,
    WGPUBuffer destination,
    int destinationOffset,
    int size,
  ) {
    return _wgpuCommandEncoderCopyBufferToBuffer(
      commandEncoder,
      source,
      sourceOffset,
      destination,
      destinationOffset,
      size,
    );
  }

  late final _wgpuCommandEncoderCopyBufferToBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUCommandEncoder,
              WGPUBuffer,
              ffi.Uint64,
              WGPUBuffer,
              ffi.Uint64,
              ffi.Uint64)>>('wgpuCommandEncoderCopyBufferToBuffer');
  late final _wgpuCommandEncoderCopyBufferToBuffer =
      _wgpuCommandEncoderCopyBufferToBufferPtr.asFunction<
          void Function(
              WGPUCommandEncoder, WGPUBuffer, int, WGPUBuffer, int, int)>();

  void wgpuCommandEncoderCopyBufferToTexture(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPUImageCopyBuffer> source,
    ffi.Pointer<WGPUImageCopyTexture> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    return _wgpuCommandEncoderCopyBufferToTexture(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  late final _wgpuCommandEncoderCopyBufferToTexturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPUCommandEncoder,
                  ffi.Pointer<WGPUImageCopyBuffer>,
                  ffi.Pointer<WGPUImageCopyTexture>,
                  ffi.Pointer<WGPUExtent3D>)>>(
      'wgpuCommandEncoderCopyBufferToTexture');
  late final _wgpuCommandEncoderCopyBufferToTexture =
      _wgpuCommandEncoderCopyBufferToTexturePtr.asFunction<
          void Function(WGPUCommandEncoder, ffi.Pointer<WGPUImageCopyBuffer>,
              ffi.Pointer<WGPUImageCopyTexture>, ffi.Pointer<WGPUExtent3D>)>();

  void wgpuCommandEncoderCopyTextureToBuffer(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPUImageCopyTexture> source,
    ffi.Pointer<WGPUImageCopyBuffer> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    return _wgpuCommandEncoderCopyTextureToBuffer(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  late final _wgpuCommandEncoderCopyTextureToBufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPUCommandEncoder,
                  ffi.Pointer<WGPUImageCopyTexture>,
                  ffi.Pointer<WGPUImageCopyBuffer>,
                  ffi.Pointer<WGPUExtent3D>)>>(
      'wgpuCommandEncoderCopyTextureToBuffer');
  late final _wgpuCommandEncoderCopyTextureToBuffer =
      _wgpuCommandEncoderCopyTextureToBufferPtr.asFunction<
          void Function(WGPUCommandEncoder, ffi.Pointer<WGPUImageCopyTexture>,
              ffi.Pointer<WGPUImageCopyBuffer>, ffi.Pointer<WGPUExtent3D>)>();

  void wgpuCommandEncoderCopyTextureToTexture(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPUImageCopyTexture> source,
    ffi.Pointer<WGPUImageCopyTexture> destination,
    ffi.Pointer<WGPUExtent3D> copySize,
  ) {
    return _wgpuCommandEncoderCopyTextureToTexture(
      commandEncoder,
      source,
      destination,
      copySize,
    );
  }

  late final _wgpuCommandEncoderCopyTextureToTexturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPUCommandEncoder,
                  ffi.Pointer<WGPUImageCopyTexture>,
                  ffi.Pointer<WGPUImageCopyTexture>,
                  ffi.Pointer<WGPUExtent3D>)>>(
      'wgpuCommandEncoderCopyTextureToTexture');
  late final _wgpuCommandEncoderCopyTextureToTexture =
      _wgpuCommandEncoderCopyTextureToTexturePtr.asFunction<
          void Function(WGPUCommandEncoder, ffi.Pointer<WGPUImageCopyTexture>,
              ffi.Pointer<WGPUImageCopyTexture>, ffi.Pointer<WGPUExtent3D>)>();

  WGPUCommandBuffer wgpuCommandEncoderFinish(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<WGPUCommandBufferDescriptor> descriptor,
  ) {
    return _wgpuCommandEncoderFinish(
      commandEncoder,
      descriptor,
    );
  }

  late final _wgpuCommandEncoderFinishPtr = _lookup<
          ffi.NativeFunction<
              WGPUCommandBuffer Function(WGPUCommandEncoder,
                  ffi.Pointer<WGPUCommandBufferDescriptor>)>>(
      'wgpuCommandEncoderFinish');
  late final _wgpuCommandEncoderFinish =
      _wgpuCommandEncoderFinishPtr.asFunction<
          WGPUCommandBuffer Function(
              WGPUCommandEncoder, ffi.Pointer<WGPUCommandBufferDescriptor>)>();

  void wgpuCommandEncoderInsertDebugMarker(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    return _wgpuCommandEncoderInsertDebugMarker(
      commandEncoder,
      markerLabel,
    );
  }

  late final _wgpuCommandEncoderInsertDebugMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUCommandEncoder,
              ffi.Pointer<ffi.Int8>)>>('wgpuCommandEncoderInsertDebugMarker');
  late final _wgpuCommandEncoderInsertDebugMarker =
      _wgpuCommandEncoderInsertDebugMarkerPtr.asFunction<
          void Function(WGPUCommandEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuCommandEncoderPopDebugGroup(
    WGPUCommandEncoder commandEncoder,
  ) {
    return _wgpuCommandEncoderPopDebugGroup(
      commandEncoder,
    );
  }

  late final _wgpuCommandEncoderPopDebugGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUCommandEncoder)>>(
          'wgpuCommandEncoderPopDebugGroup');
  late final _wgpuCommandEncoderPopDebugGroup =
      _wgpuCommandEncoderPopDebugGroupPtr
          .asFunction<void Function(WGPUCommandEncoder)>();

  void wgpuCommandEncoderPushDebugGroup(
    WGPUCommandEncoder commandEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    return _wgpuCommandEncoderPushDebugGroup(
      commandEncoder,
      groupLabel,
    );
  }

  late final _wgpuCommandEncoderPushDebugGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUCommandEncoder,
              ffi.Pointer<ffi.Int8>)>>('wgpuCommandEncoderPushDebugGroup');
  late final _wgpuCommandEncoderPushDebugGroup =
      _wgpuCommandEncoderPushDebugGroupPtr.asFunction<
          void Function(WGPUCommandEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuCommandEncoderResolveQuerySet(
    WGPUCommandEncoder commandEncoder,
    WGPUQuerySet querySet,
    int firstQuery,
    int queryCount,
    WGPUBuffer destination,
    int destinationOffset,
  ) {
    return _wgpuCommandEncoderResolveQuerySet(
      commandEncoder,
      querySet,
      firstQuery,
      queryCount,
      destination,
      destinationOffset,
    );
  }

  late final _wgpuCommandEncoderResolveQuerySetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUCommandEncoder,
              WGPUQuerySet,
              ffi.Uint32,
              ffi.Uint32,
              WGPUBuffer,
              ffi.Uint64)>>('wgpuCommandEncoderResolveQuerySet');
  late final _wgpuCommandEncoderResolveQuerySet =
      _wgpuCommandEncoderResolveQuerySetPtr.asFunction<
          void Function(
              WGPUCommandEncoder, WGPUQuerySet, int, int, WGPUBuffer, int)>();

  void wgpuCommandEncoderWriteTimestamp(
    WGPUCommandEncoder commandEncoder,
    WGPUQuerySet querySet,
    int queryIndex,
  ) {
    return _wgpuCommandEncoderWriteTimestamp(
      commandEncoder,
      querySet,
      queryIndex,
    );
  }

  late final _wgpuCommandEncoderWriteTimestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUCommandEncoder, WGPUQuerySet,
              ffi.Uint32)>>('wgpuCommandEncoderWriteTimestamp');
  late final _wgpuCommandEncoderWriteTimestamp =
      _wgpuCommandEncoderWriteTimestampPtr
          .asFunction<void Function(WGPUCommandEncoder, WGPUQuerySet, int)>();

  void wgpuComputePassEncoderBeginPipelineStatisticsQuery(
    WGPUComputePassEncoder computePassEncoder,
    WGPUQuerySet querySet,
    int queryIndex,
  ) {
    return _wgpuComputePassEncoderBeginPipelineStatisticsQuery(
      computePassEncoder,
      querySet,
      queryIndex,
    );
  }

  late final _wgpuComputePassEncoderBeginPipelineStatisticsQueryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPUComputePassEncoder, WGPUQuerySet, ffi.Uint32)>>(
      'wgpuComputePassEncoderBeginPipelineStatisticsQuery');
  late final _wgpuComputePassEncoderBeginPipelineStatisticsQuery =
      _wgpuComputePassEncoderBeginPipelineStatisticsQueryPtr.asFunction<
          void Function(WGPUComputePassEncoder, WGPUQuerySet, int)>();

  void wgpuComputePassEncoderDispatch(
    WGPUComputePassEncoder computePassEncoder,
    int x,
    int y,
    int z,
  ) {
    return _wgpuComputePassEncoderDispatch(
      computePassEncoder,
      x,
      y,
      z,
    );
  }

  late final _wgpuComputePassEncoderDispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUComputePassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('wgpuComputePassEncoderDispatch');
  late final _wgpuComputePassEncoderDispatch =
      _wgpuComputePassEncoderDispatchPtr
          .asFunction<void Function(WGPUComputePassEncoder, int, int, int)>();

  void wgpuComputePassEncoderDispatchIndirect(
    WGPUComputePassEncoder computePassEncoder,
    WGPUBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpuComputePassEncoderDispatchIndirect(
      computePassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpuComputePassEncoderDispatchIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUComputePassEncoder, WGPUBuffer,
              ffi.Uint64)>>('wgpuComputePassEncoderDispatchIndirect');
  late final _wgpuComputePassEncoderDispatchIndirect =
      _wgpuComputePassEncoderDispatchIndirectPtr
          .asFunction<void Function(WGPUComputePassEncoder, WGPUBuffer, int)>();

  void wgpuComputePassEncoderEndPass(
    WGPUComputePassEncoder computePassEncoder,
  ) {
    return _wgpuComputePassEncoderEndPass(
      computePassEncoder,
    );
  }

  late final _wgpuComputePassEncoderEndPassPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUComputePassEncoder)>>(
          'wgpuComputePassEncoderEndPass');
  late final _wgpuComputePassEncoderEndPass = _wgpuComputePassEncoderEndPassPtr
      .asFunction<void Function(WGPUComputePassEncoder)>();

  void wgpuComputePassEncoderEndPipelineStatisticsQuery(
    WGPUComputePassEncoder computePassEncoder,
  ) {
    return _wgpuComputePassEncoderEndPipelineStatisticsQuery(
      computePassEncoder,
    );
  }

  late final _wgpuComputePassEncoderEndPipelineStatisticsQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUComputePassEncoder)>>(
          'wgpuComputePassEncoderEndPipelineStatisticsQuery');
  late final _wgpuComputePassEncoderEndPipelineStatisticsQuery =
      _wgpuComputePassEncoderEndPipelineStatisticsQueryPtr
          .asFunction<void Function(WGPUComputePassEncoder)>();

  void wgpuComputePassEncoderInsertDebugMarker(
    WGPUComputePassEncoder computePassEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    return _wgpuComputePassEncoderInsertDebugMarker(
      computePassEncoder,
      markerLabel,
    );
  }

  late final _wgpuComputePassEncoderInsertDebugMarkerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPUComputePassEncoder, ffi.Pointer<ffi.Int8>)>>(
      'wgpuComputePassEncoderInsertDebugMarker');
  late final _wgpuComputePassEncoderInsertDebugMarker =
      _wgpuComputePassEncoderInsertDebugMarkerPtr.asFunction<
          void Function(WGPUComputePassEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuComputePassEncoderPopDebugGroup(
    WGPUComputePassEncoder computePassEncoder,
  ) {
    return _wgpuComputePassEncoderPopDebugGroup(
      computePassEncoder,
    );
  }

  late final _wgpuComputePassEncoderPopDebugGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUComputePassEncoder)>>(
          'wgpuComputePassEncoderPopDebugGroup');
  late final _wgpuComputePassEncoderPopDebugGroup =
      _wgpuComputePassEncoderPopDebugGroupPtr
          .asFunction<void Function(WGPUComputePassEncoder)>();

  void wgpuComputePassEncoderPushDebugGroup(
    WGPUComputePassEncoder computePassEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    return _wgpuComputePassEncoderPushDebugGroup(
      computePassEncoder,
      groupLabel,
    );
  }

  late final _wgpuComputePassEncoderPushDebugGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUComputePassEncoder,
              ffi.Pointer<ffi.Int8>)>>('wgpuComputePassEncoderPushDebugGroup');
  late final _wgpuComputePassEncoderPushDebugGroup =
      _wgpuComputePassEncoderPushDebugGroupPtr.asFunction<
          void Function(WGPUComputePassEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuComputePassEncoderSetBindGroup(
    WGPUComputePassEncoder computePassEncoder,
    int groupIndex,
    WGPUBindGroup group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    return _wgpuComputePassEncoderSetBindGroup(
      computePassEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  late final _wgpuComputePassEncoderSetBindGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUComputePassEncoder,
              ffi.Uint32,
              WGPUBindGroup,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('wgpuComputePassEncoderSetBindGroup');
  late final _wgpuComputePassEncoderSetBindGroup =
      _wgpuComputePassEncoderSetBindGroupPtr.asFunction<
          void Function(WGPUComputePassEncoder, int, WGPUBindGroup, int,
              ffi.Pointer<ffi.Uint32>)>();

  void wgpuComputePassEncoderSetPipeline(
    WGPUComputePassEncoder computePassEncoder,
    WGPUComputePipeline pipeline,
  ) {
    return _wgpuComputePassEncoderSetPipeline(
      computePassEncoder,
      pipeline,
    );
  }

  late final _wgpuComputePassEncoderSetPipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUComputePassEncoder,
              WGPUComputePipeline)>>('wgpuComputePassEncoderSetPipeline');
  late final _wgpuComputePassEncoderSetPipeline =
      _wgpuComputePassEncoderSetPipelinePtr.asFunction<
          void Function(WGPUComputePassEncoder, WGPUComputePipeline)>();

  WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(
    WGPUComputePipeline computePipeline,
    int groupIndex,
  ) {
    return _wgpuComputePipelineGetBindGroupLayout(
      computePipeline,
      groupIndex,
    );
  }

  late final _wgpuComputePipelineGetBindGroupLayoutPtr = _lookup<
      ffi.NativeFunction<
          WGPUBindGroupLayout Function(WGPUComputePipeline,
              ffi.Uint32)>>('wgpuComputePipelineGetBindGroupLayout');
  late final _wgpuComputePipelineGetBindGroupLayout =
      _wgpuComputePipelineGetBindGroupLayoutPtr
          .asFunction<WGPUBindGroupLayout Function(WGPUComputePipeline, int)>();

  void wgpuComputePipelineSetLabel(
    WGPUComputePipeline computePipeline,
    ffi.Pointer<ffi.Int8> label,
  ) {
    return _wgpuComputePipelineSetLabel(
      computePipeline,
      label,
    );
  }

  late final _wgpuComputePipelineSetLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUComputePipeline,
              ffi.Pointer<ffi.Int8>)>>('wgpuComputePipelineSetLabel');
  late final _wgpuComputePipelineSetLabel = _wgpuComputePipelineSetLabelPtr
      .asFunction<void Function(WGPUComputePipeline, ffi.Pointer<ffi.Int8>)>();

  WGPUBindGroup wgpuDeviceCreateBindGroup(
    WGPUDevice device,
    ffi.Pointer<WGPUBindGroupDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateBindGroup(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateBindGroupPtr = _lookup<
          ffi.NativeFunction<
              WGPUBindGroup Function(
                  WGPUDevice, ffi.Pointer<WGPUBindGroupDescriptor>)>>(
      'wgpuDeviceCreateBindGroup');
  late final _wgpuDeviceCreateBindGroup =
      _wgpuDeviceCreateBindGroupPtr.asFunction<
          WGPUBindGroup Function(
              WGPUDevice, ffi.Pointer<WGPUBindGroupDescriptor>)>();

  WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(
    WGPUDevice device,
    ffi.Pointer<WGPUBindGroupLayoutDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateBindGroupLayout(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateBindGroupLayoutPtr = _lookup<
          ffi.NativeFunction<
              WGPUBindGroupLayout Function(
                  WGPUDevice, ffi.Pointer<WGPUBindGroupLayoutDescriptor>)>>(
      'wgpuDeviceCreateBindGroupLayout');
  late final _wgpuDeviceCreateBindGroupLayout =
      _wgpuDeviceCreateBindGroupLayoutPtr.asFunction<
          WGPUBindGroupLayout Function(
              WGPUDevice, ffi.Pointer<WGPUBindGroupLayoutDescriptor>)>();

  WGPUBuffer wgpuDeviceCreateBuffer(
    WGPUDevice device,
    ffi.Pointer<WGPUBufferDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateBuffer(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          WGPUBuffer Function(WGPUDevice,
              ffi.Pointer<WGPUBufferDescriptor>)>>('wgpuDeviceCreateBuffer');
  late final _wgpuDeviceCreateBuffer = _wgpuDeviceCreateBufferPtr.asFunction<
      WGPUBuffer Function(WGPUDevice, ffi.Pointer<WGPUBufferDescriptor>)>();

  WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(
    WGPUDevice device,
    ffi.Pointer<WGPUCommandEncoderDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateCommandEncoder(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateCommandEncoderPtr = _lookup<
          ffi.NativeFunction<
              WGPUCommandEncoder Function(
                  WGPUDevice, ffi.Pointer<WGPUCommandEncoderDescriptor>)>>(
      'wgpuDeviceCreateCommandEncoder');
  late final _wgpuDeviceCreateCommandEncoder =
      _wgpuDeviceCreateCommandEncoderPtr.asFunction<
          WGPUCommandEncoder Function(
              WGPUDevice, ffi.Pointer<WGPUCommandEncoderDescriptor>)>();

  WGPUComputePipeline wgpuDeviceCreateComputePipeline(
    WGPUDevice device,
    ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateComputePipeline(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateComputePipelinePtr = _lookup<
          ffi.NativeFunction<
              WGPUComputePipeline Function(
                  WGPUDevice, ffi.Pointer<WGPUComputePipelineDescriptor>)>>(
      'wgpuDeviceCreateComputePipeline');
  late final _wgpuDeviceCreateComputePipeline =
      _wgpuDeviceCreateComputePipelinePtr.asFunction<
          WGPUComputePipeline Function(
              WGPUDevice, ffi.Pointer<WGPUComputePipelineDescriptor>)>();

  void wgpuDeviceCreateComputePipelineAsync(
    WGPUDevice device,
    ffi.Pointer<WGPUComputePipelineDescriptor> descriptor,
    WGPUCreateComputePipelineAsyncCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuDeviceCreateComputePipelineAsync(
      device,
      descriptor,
      callback,
      userdata,
    );
  }

  late final _wgpuDeviceCreateComputePipelineAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUDevice,
              ffi.Pointer<WGPUComputePipelineDescriptor>,
              WGPUCreateComputePipelineAsyncCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuDeviceCreateComputePipelineAsync');
  late final _wgpuDeviceCreateComputePipelineAsync =
      _wgpuDeviceCreateComputePipelineAsyncPtr.asFunction<
          void Function(WGPUDevice, ffi.Pointer<WGPUComputePipelineDescriptor>,
              WGPUCreateComputePipelineAsyncCallback, ffi.Pointer<ffi.Void>)>();

  WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(
    WGPUDevice device,
    ffi.Pointer<WGPUPipelineLayoutDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreatePipelineLayout(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreatePipelineLayoutPtr = _lookup<
          ffi.NativeFunction<
              WGPUPipelineLayout Function(
                  WGPUDevice, ffi.Pointer<WGPUPipelineLayoutDescriptor>)>>(
      'wgpuDeviceCreatePipelineLayout');
  late final _wgpuDeviceCreatePipelineLayout =
      _wgpuDeviceCreatePipelineLayoutPtr.asFunction<
          WGPUPipelineLayout Function(
              WGPUDevice, ffi.Pointer<WGPUPipelineLayoutDescriptor>)>();

  WGPUQuerySet wgpuDeviceCreateQuerySet(
    WGPUDevice device,
    ffi.Pointer<WGPUQuerySetDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateQuerySet(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateQuerySetPtr = _lookup<
          ffi.NativeFunction<
              WGPUQuerySet Function(
                  WGPUDevice, ffi.Pointer<WGPUQuerySetDescriptor>)>>(
      'wgpuDeviceCreateQuerySet');
  late final _wgpuDeviceCreateQuerySet =
      _wgpuDeviceCreateQuerySetPtr.asFunction<
          WGPUQuerySet Function(
              WGPUDevice, ffi.Pointer<WGPUQuerySetDescriptor>)>();

  WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(
    WGPUDevice device,
    ffi.Pointer<WGPURenderBundleEncoderDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateRenderBundleEncoder(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateRenderBundleEncoderPtr = _lookup<
          ffi.NativeFunction<
              WGPURenderBundleEncoder Function(
                  WGPUDevice, ffi.Pointer<WGPURenderBundleEncoderDescriptor>)>>(
      'wgpuDeviceCreateRenderBundleEncoder');
  late final _wgpuDeviceCreateRenderBundleEncoder =
      _wgpuDeviceCreateRenderBundleEncoderPtr.asFunction<
          WGPURenderBundleEncoder Function(
              WGPUDevice, ffi.Pointer<WGPURenderBundleEncoderDescriptor>)>();

  WGPURenderPipeline wgpuDeviceCreateRenderPipeline(
    WGPUDevice device,
    ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateRenderPipeline(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateRenderPipelinePtr = _lookup<
          ffi.NativeFunction<
              WGPURenderPipeline Function(
                  WGPUDevice, ffi.Pointer<WGPURenderPipelineDescriptor>)>>(
      'wgpuDeviceCreateRenderPipeline');
  late final _wgpuDeviceCreateRenderPipeline =
      _wgpuDeviceCreateRenderPipelinePtr.asFunction<
          WGPURenderPipeline Function(
              WGPUDevice, ffi.Pointer<WGPURenderPipelineDescriptor>)>();

  void wgpuDeviceCreateRenderPipelineAsync(
    WGPUDevice device,
    ffi.Pointer<WGPURenderPipelineDescriptor> descriptor,
    WGPUCreateRenderPipelineAsyncCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuDeviceCreateRenderPipelineAsync(
      device,
      descriptor,
      callback,
      userdata,
    );
  }

  late final _wgpuDeviceCreateRenderPipelineAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUDevice,
              ffi.Pointer<WGPURenderPipelineDescriptor>,
              WGPUCreateRenderPipelineAsyncCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuDeviceCreateRenderPipelineAsync');
  late final _wgpuDeviceCreateRenderPipelineAsync =
      _wgpuDeviceCreateRenderPipelineAsyncPtr.asFunction<
          void Function(WGPUDevice, ffi.Pointer<WGPURenderPipelineDescriptor>,
              WGPUCreateRenderPipelineAsyncCallback, ffi.Pointer<ffi.Void>)>();

  WGPUSampler wgpuDeviceCreateSampler(
    WGPUDevice device,
    ffi.Pointer<WGPUSamplerDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateSampler(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateSamplerPtr = _lookup<
      ffi.NativeFunction<
          WGPUSampler Function(WGPUDevice,
              ffi.Pointer<WGPUSamplerDescriptor>)>>('wgpuDeviceCreateSampler');
  late final _wgpuDeviceCreateSampler = _wgpuDeviceCreateSamplerPtr.asFunction<
      WGPUSampler Function(WGPUDevice, ffi.Pointer<WGPUSamplerDescriptor>)>();

  WGPUShaderModule wgpuDeviceCreateShaderModule(
    WGPUDevice device,
    ffi.Pointer<WGPUShaderModuleDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateShaderModule(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateShaderModulePtr = _lookup<
          ffi.NativeFunction<
              WGPUShaderModule Function(
                  WGPUDevice, ffi.Pointer<WGPUShaderModuleDescriptor>)>>(
      'wgpuDeviceCreateShaderModule');
  late final _wgpuDeviceCreateShaderModule =
      _wgpuDeviceCreateShaderModulePtr.asFunction<
          WGPUShaderModule Function(
              WGPUDevice, ffi.Pointer<WGPUShaderModuleDescriptor>)>();

  WGPUSwapChain wgpuDeviceCreateSwapChain(
    WGPUDevice device,
    WGPUSurface surface,
    ffi.Pointer<WGPUSwapChainDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateSwapChain(
      device,
      surface,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateSwapChainPtr = _lookup<
          ffi.NativeFunction<
              WGPUSwapChain Function(WGPUDevice, WGPUSurface,
                  ffi.Pointer<WGPUSwapChainDescriptor>)>>(
      'wgpuDeviceCreateSwapChain');
  late final _wgpuDeviceCreateSwapChain =
      _wgpuDeviceCreateSwapChainPtr.asFunction<
          WGPUSwapChain Function(
              WGPUDevice, WGPUSurface, ffi.Pointer<WGPUSwapChainDescriptor>)>();

  WGPUTexture wgpuDeviceCreateTexture(
    WGPUDevice device,
    ffi.Pointer<WGPUTextureDescriptor> descriptor,
  ) {
    return _wgpuDeviceCreateTexture(
      device,
      descriptor,
    );
  }

  late final _wgpuDeviceCreateTexturePtr = _lookup<
      ffi.NativeFunction<
          WGPUTexture Function(WGPUDevice,
              ffi.Pointer<WGPUTextureDescriptor>)>>('wgpuDeviceCreateTexture');
  late final _wgpuDeviceCreateTexture = _wgpuDeviceCreateTexturePtr.asFunction<
      WGPUTexture Function(WGPUDevice, ffi.Pointer<WGPUTextureDescriptor>)>();

  void wgpuDeviceDestroy(
    WGPUDevice device,
  ) {
    return _wgpuDeviceDestroy(
      device,
    );
  }

  late final _wgpuDeviceDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUDevice)>>(
          'wgpuDeviceDestroy');
  late final _wgpuDeviceDestroy =
      _wgpuDeviceDestroyPtr.asFunction<void Function(WGPUDevice)>();

  int wgpuDeviceEnumerateFeatures(
    WGPUDevice device,
    ffi.Pointer<ffi.Int32> features,
  ) {
    return _wgpuDeviceEnumerateFeatures(
      device,
      features,
    );
  }

  late final _wgpuDeviceEnumerateFeaturesPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(WGPUDevice,
              ffi.Pointer<ffi.Int32>)>>('wgpuDeviceEnumerateFeatures');
  late final _wgpuDeviceEnumerateFeatures = _wgpuDeviceEnumerateFeaturesPtr
      .asFunction<int Function(WGPUDevice, ffi.Pointer<ffi.Int32>)>();

  int wgpuDeviceGetLimits(
    WGPUDevice device,
    ffi.Pointer<WGPUSupportedLimits> limits,
  ) {
    return _wgpuDeviceGetLimits(
      device,
      limits,
    );
  }

  late final _wgpuDeviceGetLimitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(WGPUDevice,
              ffi.Pointer<WGPUSupportedLimits>)>>('wgpuDeviceGetLimits');
  late final _wgpuDeviceGetLimits = _wgpuDeviceGetLimitsPtr
      .asFunction<int Function(WGPUDevice, ffi.Pointer<WGPUSupportedLimits>)>();

  WGPUQueue wgpuDeviceGetQueue(
    WGPUDevice device,
  ) {
    return _wgpuDeviceGetQueue(
      device,
    );
  }

  late final _wgpuDeviceGetQueuePtr =
      _lookup<ffi.NativeFunction<WGPUQueue Function(WGPUDevice)>>(
          'wgpuDeviceGetQueue');
  late final _wgpuDeviceGetQueue =
      _wgpuDeviceGetQueuePtr.asFunction<WGPUQueue Function(WGPUDevice)>();

  int wgpuDeviceHasFeature(
    WGPUDevice device,
    int feature,
  ) {
    return _wgpuDeviceHasFeature(
      device,
      feature,
    );
  }

  late final _wgpuDeviceHasFeaturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(WGPUDevice, ffi.Int32)>>(
          'wgpuDeviceHasFeature');
  late final _wgpuDeviceHasFeature =
      _wgpuDeviceHasFeaturePtr.asFunction<int Function(WGPUDevice, int)>();

  int wgpuDevicePopErrorScope(
    WGPUDevice device,
    WGPUErrorCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuDevicePopErrorScope(
      device,
      callback,
      userdata,
    );
  }

  late final _wgpuDevicePopErrorScopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(WGPUDevice, WGPUErrorCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuDevicePopErrorScope');
  late final _wgpuDevicePopErrorScope = _wgpuDevicePopErrorScopePtr.asFunction<
      int Function(WGPUDevice, WGPUErrorCallback, ffi.Pointer<ffi.Void>)>();

  void wgpuDevicePushErrorScope(
    WGPUDevice device,
    int filter,
  ) {
    return _wgpuDevicePushErrorScope(
      device,
      filter,
    );
  }

  late final _wgpuDevicePushErrorScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUDevice, ffi.Int32)>>(
          'wgpuDevicePushErrorScope');
  late final _wgpuDevicePushErrorScope =
      _wgpuDevicePushErrorScopePtr.asFunction<void Function(WGPUDevice, int)>();

  void wgpuDeviceSetDeviceLostCallback(
    WGPUDevice device,
    WGPUDeviceLostCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuDeviceSetDeviceLostCallback(
      device,
      callback,
      userdata,
    );
  }

  late final _wgpuDeviceSetDeviceLostCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUDevice, WGPUDeviceLostCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuDeviceSetDeviceLostCallback');
  late final _wgpuDeviceSetDeviceLostCallback =
      _wgpuDeviceSetDeviceLostCallbackPtr.asFunction<
          void Function(
              WGPUDevice, WGPUDeviceLostCallback, ffi.Pointer<ffi.Void>)>();

  void wgpuDeviceSetUncapturedErrorCallback(
    WGPUDevice device,
    WGPUErrorCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuDeviceSetUncapturedErrorCallback(
      device,
      callback,
      userdata,
    );
  }

  late final _wgpuDeviceSetUncapturedErrorCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUDevice, WGPUErrorCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuDeviceSetUncapturedErrorCallback');
  late final _wgpuDeviceSetUncapturedErrorCallback =
      _wgpuDeviceSetUncapturedErrorCallbackPtr.asFunction<
          void Function(
              WGPUDevice, WGPUErrorCallback, ffi.Pointer<ffi.Void>)>();

  WGPUSurface wgpuInstanceCreateSurface(
    WGPUInstance instance,
    ffi.Pointer<WGPUSurfaceDescriptor> descriptor,
  ) {
    return _wgpuInstanceCreateSurface(
      instance,
      descriptor,
    );
  }

  late final _wgpuInstanceCreateSurfacePtr = _lookup<
          ffi.NativeFunction<
              WGPUSurface Function(
                  WGPUInstance, ffi.Pointer<WGPUSurfaceDescriptor>)>>(
      'wgpuInstanceCreateSurface');
  late final _wgpuInstanceCreateSurface =
      _wgpuInstanceCreateSurfacePtr.asFunction<
          WGPUSurface Function(
              WGPUInstance, ffi.Pointer<WGPUSurfaceDescriptor>)>();

  void wgpuInstanceProcessEvents(
    WGPUInstance instance,
  ) {
    return _wgpuInstanceProcessEvents(
      instance,
    );
  }

  late final _wgpuInstanceProcessEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUInstance)>>(
          'wgpuInstanceProcessEvents');
  late final _wgpuInstanceProcessEvents =
      _wgpuInstanceProcessEventsPtr.asFunction<void Function(WGPUInstance)>();

  void wgpuInstanceRequestAdapter(
    WGPUInstance instance,
    ffi.Pointer<WGPURequestAdapterOptions> options,
    WGPURequestAdapterCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuInstanceRequestAdapter(
      instance,
      options,
      callback,
      userdata,
    );
  }

  late final _wgpuInstanceRequestAdapterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUInstance,
              ffi.Pointer<WGPURequestAdapterOptions>,
              WGPURequestAdapterCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuInstanceRequestAdapter');
  late final _wgpuInstanceRequestAdapter =
      _wgpuInstanceRequestAdapterPtr.asFunction<
          void Function(WGPUInstance, ffi.Pointer<WGPURequestAdapterOptions>,
              WGPURequestAdapterCallback, ffi.Pointer<ffi.Void>)>();

  void wgpuQuerySetDestroy(
    WGPUQuerySet querySet,
  ) {
    return _wgpuQuerySetDestroy(
      querySet,
    );
  }

  late final _wgpuQuerySetDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUQuerySet)>>(
          'wgpuQuerySetDestroy');
  late final _wgpuQuerySetDestroy =
      _wgpuQuerySetDestroyPtr.asFunction<void Function(WGPUQuerySet)>();

  void wgpuQueueOnSubmittedWorkDone(
    WGPUQueue queue,
    int signalValue,
    WGPUQueueWorkDoneCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuQueueOnSubmittedWorkDone(
      queue,
      signalValue,
      callback,
      userdata,
    );
  }

  late final _wgpuQueueOnSubmittedWorkDonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUQueue, ffi.Uint64, WGPUQueueWorkDoneCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuQueueOnSubmittedWorkDone');
  late final _wgpuQueueOnSubmittedWorkDone =
      _wgpuQueueOnSubmittedWorkDonePtr.asFunction<
          void Function(WGPUQueue, int, WGPUQueueWorkDoneCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpuQueueSubmit(
    WGPUQueue queue,
    int commandCount,
    ffi.Pointer<WGPUCommandBuffer> commands,
  ) {
    return _wgpuQueueSubmit(
      queue,
      commandCount,
      commands,
    );
  }

  late final _wgpuQueueSubmitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUQueue, ffi.Uint32,
              ffi.Pointer<WGPUCommandBuffer>)>>('wgpuQueueSubmit');
  late final _wgpuQueueSubmit = _wgpuQueueSubmitPtr.asFunction<
      void Function(WGPUQueue, int, ffi.Pointer<WGPUCommandBuffer>)>();

  void wgpuQueueWriteBuffer(
    WGPUQueue queue,
    WGPUBuffer buffer,
    int bufferOffset,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _wgpuQueueWriteBuffer(
      queue,
      buffer,
      bufferOffset,
      data,
      size,
    );
  }

  late final _wgpuQueueWriteBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUQueue, WGPUBuffer, ffi.Uint64,
              ffi.Pointer<ffi.Void>, size_t)>>('wgpuQueueWriteBuffer');
  late final _wgpuQueueWriteBuffer = _wgpuQueueWriteBufferPtr.asFunction<
      void Function(WGPUQueue, WGPUBuffer, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpuQueueWriteTexture(
    WGPUQueue queue,
    ffi.Pointer<WGPUImageCopyTexture> destination,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<WGPUTextureDataLayout> dataLayout,
    ffi.Pointer<WGPUExtent3D> writeSize,
  ) {
    return _wgpuQueueWriteTexture(
      queue,
      destination,
      data,
      dataSize,
      dataLayout,
      writeSize,
    );
  }

  late final _wgpuQueueWriteTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPUQueue,
              ffi.Pointer<WGPUImageCopyTexture>,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<WGPUTextureDataLayout>,
              ffi.Pointer<WGPUExtent3D>)>>('wgpuQueueWriteTexture');
  late final _wgpuQueueWriteTexture = _wgpuQueueWriteTexturePtr.asFunction<
      void Function(
          WGPUQueue,
          ffi.Pointer<WGPUImageCopyTexture>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<WGPUTextureDataLayout>,
          ffi.Pointer<WGPUExtent3D>)>();

  void wgpuRenderBundleEncoderDraw(
    WGPURenderBundleEncoder renderBundleEncoder,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    return _wgpuRenderBundleEncoderDraw(
      renderBundleEncoder,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  late final _wgpuRenderBundleEncoderDrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderBundleEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpuRenderBundleEncoderDraw');
  late final _wgpuRenderBundleEncoderDraw = _wgpuRenderBundleEncoderDrawPtr
      .asFunction<void Function(WGPURenderBundleEncoder, int, int, int, int)>();

  void wgpuRenderBundleEncoderDrawIndexed(
    WGPURenderBundleEncoder renderBundleEncoder,
    int indexCount,
    int instanceCount,
    int firstIndex,
    int baseVertex,
    int firstInstance,
  ) {
    return _wgpuRenderBundleEncoderDrawIndexed(
      renderBundleEncoder,
      indexCount,
      instanceCount,
      firstIndex,
      baseVertex,
      firstInstance,
    );
  }

  late final _wgpuRenderBundleEncoderDrawIndexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderBundleEncoder,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32)>>('wgpuRenderBundleEncoderDrawIndexed');
  late final _wgpuRenderBundleEncoderDrawIndexed =
      _wgpuRenderBundleEncoderDrawIndexedPtr.asFunction<
          void Function(WGPURenderBundleEncoder, int, int, int, int, int)>();

  void wgpuRenderBundleEncoderDrawIndexedIndirect(
    WGPURenderBundleEncoder renderBundleEncoder,
    WGPUBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpuRenderBundleEncoderDrawIndexedIndirect(
      renderBundleEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpuRenderBundleEncoderDrawIndexedIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderBundleEncoder, WGPUBuffer,
              ffi.Uint64)>>('wgpuRenderBundleEncoderDrawIndexedIndirect');
  late final _wgpuRenderBundleEncoderDrawIndexedIndirect =
      _wgpuRenderBundleEncoderDrawIndexedIndirectPtr.asFunction<
          void Function(WGPURenderBundleEncoder, WGPUBuffer, int)>();

  void wgpuRenderBundleEncoderDrawIndirect(
    WGPURenderBundleEncoder renderBundleEncoder,
    WGPUBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpuRenderBundleEncoderDrawIndirect(
      renderBundleEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpuRenderBundleEncoderDrawIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderBundleEncoder, WGPUBuffer,
              ffi.Uint64)>>('wgpuRenderBundleEncoderDrawIndirect');
  late final _wgpuRenderBundleEncoderDrawIndirect =
      _wgpuRenderBundleEncoderDrawIndirectPtr.asFunction<
          void Function(WGPURenderBundleEncoder, WGPUBuffer, int)>();

  WGPURenderBundle wgpuRenderBundleEncoderFinish(
    WGPURenderBundleEncoder renderBundleEncoder,
    ffi.Pointer<WGPURenderBundleDescriptor> descriptor,
  ) {
    return _wgpuRenderBundleEncoderFinish(
      renderBundleEncoder,
      descriptor,
    );
  }

  late final _wgpuRenderBundleEncoderFinishPtr = _lookup<
          ffi.NativeFunction<
              WGPURenderBundle Function(WGPURenderBundleEncoder,
                  ffi.Pointer<WGPURenderBundleDescriptor>)>>(
      'wgpuRenderBundleEncoderFinish');
  late final _wgpuRenderBundleEncoderFinish =
      _wgpuRenderBundleEncoderFinishPtr.asFunction<
          WGPURenderBundle Function(WGPURenderBundleEncoder,
              ffi.Pointer<WGPURenderBundleDescriptor>)>();

  void wgpuRenderBundleEncoderInsertDebugMarker(
    WGPURenderBundleEncoder renderBundleEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    return _wgpuRenderBundleEncoderInsertDebugMarker(
      renderBundleEncoder,
      markerLabel,
    );
  }

  late final _wgpuRenderBundleEncoderInsertDebugMarkerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPURenderBundleEncoder, ffi.Pointer<ffi.Int8>)>>(
      'wgpuRenderBundleEncoderInsertDebugMarker');
  late final _wgpuRenderBundleEncoderInsertDebugMarker =
      _wgpuRenderBundleEncoderInsertDebugMarkerPtr.asFunction<
          void Function(WGPURenderBundleEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuRenderBundleEncoderPopDebugGroup(
    WGPURenderBundleEncoder renderBundleEncoder,
  ) {
    return _wgpuRenderBundleEncoderPopDebugGroup(
      renderBundleEncoder,
    );
  }

  late final _wgpuRenderBundleEncoderPopDebugGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderBundleEncoder)>>(
          'wgpuRenderBundleEncoderPopDebugGroup');
  late final _wgpuRenderBundleEncoderPopDebugGroup =
      _wgpuRenderBundleEncoderPopDebugGroupPtr
          .asFunction<void Function(WGPURenderBundleEncoder)>();

  void wgpuRenderBundleEncoderPushDebugGroup(
    WGPURenderBundleEncoder renderBundleEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    return _wgpuRenderBundleEncoderPushDebugGroup(
      renderBundleEncoder,
      groupLabel,
    );
  }

  late final _wgpuRenderBundleEncoderPushDebugGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderBundleEncoder,
              ffi.Pointer<ffi.Int8>)>>('wgpuRenderBundleEncoderPushDebugGroup');
  late final _wgpuRenderBundleEncoderPushDebugGroup =
      _wgpuRenderBundleEncoderPushDebugGroupPtr.asFunction<
          void Function(WGPURenderBundleEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuRenderBundleEncoderSetBindGroup(
    WGPURenderBundleEncoder renderBundleEncoder,
    int groupIndex,
    WGPUBindGroup group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    return _wgpuRenderBundleEncoderSetBindGroup(
      renderBundleEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  late final _wgpuRenderBundleEncoderSetBindGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderBundleEncoder,
              ffi.Uint32,
              WGPUBindGroup,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('wgpuRenderBundleEncoderSetBindGroup');
  late final _wgpuRenderBundleEncoderSetBindGroup =
      _wgpuRenderBundleEncoderSetBindGroupPtr.asFunction<
          void Function(WGPURenderBundleEncoder, int, WGPUBindGroup, int,
              ffi.Pointer<ffi.Uint32>)>();

  void wgpuRenderBundleEncoderSetIndexBuffer(
    WGPURenderBundleEncoder renderBundleEncoder,
    WGPUBuffer buffer,
    int format,
    int offset,
    int size,
  ) {
    return _wgpuRenderBundleEncoderSetIndexBuffer(
      renderBundleEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  late final _wgpuRenderBundleEncoderSetIndexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderBundleEncoder,
              WGPUBuffer,
              ffi.Int32,
              ffi.Uint64,
              ffi.Uint64)>>('wgpuRenderBundleEncoderSetIndexBuffer');
  late final _wgpuRenderBundleEncoderSetIndexBuffer =
      _wgpuRenderBundleEncoderSetIndexBufferPtr.asFunction<
          void Function(WGPURenderBundleEncoder, WGPUBuffer, int, int, int)>();

  void wgpuRenderBundleEncoderSetPipeline(
    WGPURenderBundleEncoder renderBundleEncoder,
    WGPURenderPipeline pipeline,
  ) {
    return _wgpuRenderBundleEncoderSetPipeline(
      renderBundleEncoder,
      pipeline,
    );
  }

  late final _wgpuRenderBundleEncoderSetPipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderBundleEncoder,
              WGPURenderPipeline)>>('wgpuRenderBundleEncoderSetPipeline');
  late final _wgpuRenderBundleEncoderSetPipeline =
      _wgpuRenderBundleEncoderSetPipelinePtr.asFunction<
          void Function(WGPURenderBundleEncoder, WGPURenderPipeline)>();

  void wgpuRenderBundleEncoderSetVertexBuffer(
    WGPURenderBundleEncoder renderBundleEncoder,
    int slot,
    WGPUBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpuRenderBundleEncoderSetVertexBuffer(
      renderBundleEncoder,
      slot,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpuRenderBundleEncoderSetVertexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderBundleEncoder,
              ffi.Uint32,
              WGPUBuffer,
              ffi.Uint64,
              ffi.Uint64)>>('wgpuRenderBundleEncoderSetVertexBuffer');
  late final _wgpuRenderBundleEncoderSetVertexBuffer =
      _wgpuRenderBundleEncoderSetVertexBufferPtr.asFunction<
          void Function(WGPURenderBundleEncoder, int, WGPUBuffer, int, int)>();

  void wgpuRenderPassEncoderBeginOcclusionQuery(
    WGPURenderPassEncoder renderPassEncoder,
    int queryIndex,
  ) {
    return _wgpuRenderPassEncoderBeginOcclusionQuery(
      renderPassEncoder,
      queryIndex,
    );
  }

  late final _wgpuRenderPassEncoderBeginOcclusionQueryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder,
              ffi.Uint32)>>('wgpuRenderPassEncoderBeginOcclusionQuery');
  late final _wgpuRenderPassEncoderBeginOcclusionQuery =
      _wgpuRenderPassEncoderBeginOcclusionQueryPtr
          .asFunction<void Function(WGPURenderPassEncoder, int)>();

  void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(
    WGPURenderPassEncoder renderPassEncoder,
    WGPUQuerySet querySet,
    int queryIndex,
  ) {
    return _wgpuRenderPassEncoderBeginPipelineStatisticsQuery(
      renderPassEncoder,
      querySet,
      queryIndex,
    );
  }

  late final _wgpuRenderPassEncoderBeginPipelineStatisticsQueryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPURenderPassEncoder, WGPUQuerySet, ffi.Uint32)>>(
      'wgpuRenderPassEncoderBeginPipelineStatisticsQuery');
  late final _wgpuRenderPassEncoderBeginPipelineStatisticsQuery =
      _wgpuRenderPassEncoderBeginPipelineStatisticsQueryPtr.asFunction<
          void Function(WGPURenderPassEncoder, WGPUQuerySet, int)>();

  void wgpuRenderPassEncoderDraw(
    WGPURenderPassEncoder renderPassEncoder,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    return _wgpuRenderPassEncoderDraw(
      renderPassEncoder,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  late final _wgpuRenderPassEncoderDrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpuRenderPassEncoderDraw');
  late final _wgpuRenderPassEncoderDraw = _wgpuRenderPassEncoderDrawPtr
      .asFunction<void Function(WGPURenderPassEncoder, int, int, int, int)>();

  void wgpuRenderPassEncoderDrawIndexed(
    WGPURenderPassEncoder renderPassEncoder,
    int indexCount,
    int instanceCount,
    int firstIndex,
    int baseVertex,
    int firstInstance,
  ) {
    return _wgpuRenderPassEncoderDrawIndexed(
      renderPassEncoder,
      indexCount,
      instanceCount,
      firstIndex,
      baseVertex,
      firstInstance,
    );
  }

  late final _wgpuRenderPassEncoderDrawIndexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderPassEncoder,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32)>>('wgpuRenderPassEncoderDrawIndexed');
  late final _wgpuRenderPassEncoderDrawIndexed =
      _wgpuRenderPassEncoderDrawIndexedPtr.asFunction<
          void Function(WGPURenderPassEncoder, int, int, int, int, int)>();

  void wgpuRenderPassEncoderDrawIndexedIndirect(
    WGPURenderPassEncoder renderPassEncoder,
    WGPUBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpuRenderPassEncoderDrawIndexedIndirect(
      renderPassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpuRenderPassEncoderDrawIndexedIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, WGPUBuffer,
              ffi.Uint64)>>('wgpuRenderPassEncoderDrawIndexedIndirect');
  late final _wgpuRenderPassEncoderDrawIndexedIndirect =
      _wgpuRenderPassEncoderDrawIndexedIndirectPtr
          .asFunction<void Function(WGPURenderPassEncoder, WGPUBuffer, int)>();

  void wgpuRenderPassEncoderDrawIndirect(
    WGPURenderPassEncoder renderPassEncoder,
    WGPUBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpuRenderPassEncoderDrawIndirect(
      renderPassEncoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpuRenderPassEncoderDrawIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, WGPUBuffer,
              ffi.Uint64)>>('wgpuRenderPassEncoderDrawIndirect');
  late final _wgpuRenderPassEncoderDrawIndirect =
      _wgpuRenderPassEncoderDrawIndirectPtr
          .asFunction<void Function(WGPURenderPassEncoder, WGPUBuffer, int)>();

  void wgpuRenderPassEncoderEndOcclusionQuery(
    WGPURenderPassEncoder renderPassEncoder,
  ) {
    return _wgpuRenderPassEncoderEndOcclusionQuery(
      renderPassEncoder,
    );
  }

  late final _wgpuRenderPassEncoderEndOcclusionQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderPassEncoder)>>(
          'wgpuRenderPassEncoderEndOcclusionQuery');
  late final _wgpuRenderPassEncoderEndOcclusionQuery =
      _wgpuRenderPassEncoderEndOcclusionQueryPtr
          .asFunction<void Function(WGPURenderPassEncoder)>();

  void wgpuRenderPassEncoderEndPass(
    WGPURenderPassEncoder renderPassEncoder,
  ) {
    return _wgpuRenderPassEncoderEndPass(
      renderPassEncoder,
    );
  }

  late final _wgpuRenderPassEncoderEndPassPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderPassEncoder)>>(
          'wgpuRenderPassEncoderEndPass');
  late final _wgpuRenderPassEncoderEndPass = _wgpuRenderPassEncoderEndPassPtr
      .asFunction<void Function(WGPURenderPassEncoder)>();

  void wgpuRenderPassEncoderEndPipelineStatisticsQuery(
    WGPURenderPassEncoder renderPassEncoder,
  ) {
    return _wgpuRenderPassEncoderEndPipelineStatisticsQuery(
      renderPassEncoder,
    );
  }

  late final _wgpuRenderPassEncoderEndPipelineStatisticsQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderPassEncoder)>>(
          'wgpuRenderPassEncoderEndPipelineStatisticsQuery');
  late final _wgpuRenderPassEncoderEndPipelineStatisticsQuery =
      _wgpuRenderPassEncoderEndPipelineStatisticsQueryPtr
          .asFunction<void Function(WGPURenderPassEncoder)>();

  void wgpuRenderPassEncoderExecuteBundles(
    WGPURenderPassEncoder renderPassEncoder,
    int bundlesCount,
    ffi.Pointer<WGPURenderBundle> bundles,
  ) {
    return _wgpuRenderPassEncoderExecuteBundles(
      renderPassEncoder,
      bundlesCount,
      bundles,
    );
  }

  late final _wgpuRenderPassEncoderExecuteBundlesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGPURenderPassEncoder, ffi.Uint32,
                  ffi.Pointer<WGPURenderBundle>)>>(
      'wgpuRenderPassEncoderExecuteBundles');
  late final _wgpuRenderPassEncoderExecuteBundles =
      _wgpuRenderPassEncoderExecuteBundlesPtr.asFunction<
          void Function(
              WGPURenderPassEncoder, int, ffi.Pointer<WGPURenderBundle>)>();

  void wgpuRenderPassEncoderInsertDebugMarker(
    WGPURenderPassEncoder renderPassEncoder,
    ffi.Pointer<ffi.Int8> markerLabel,
  ) {
    return _wgpuRenderPassEncoderInsertDebugMarker(
      renderPassEncoder,
      markerLabel,
    );
  }

  late final _wgpuRenderPassEncoderInsertDebugMarkerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGPURenderPassEncoder, ffi.Pointer<ffi.Int8>)>>(
      'wgpuRenderPassEncoderInsertDebugMarker');
  late final _wgpuRenderPassEncoderInsertDebugMarker =
      _wgpuRenderPassEncoderInsertDebugMarkerPtr.asFunction<
          void Function(WGPURenderPassEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuRenderPassEncoderPopDebugGroup(
    WGPURenderPassEncoder renderPassEncoder,
  ) {
    return _wgpuRenderPassEncoderPopDebugGroup(
      renderPassEncoder,
    );
  }

  late final _wgpuRenderPassEncoderPopDebugGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderPassEncoder)>>(
          'wgpuRenderPassEncoderPopDebugGroup');
  late final _wgpuRenderPassEncoderPopDebugGroup =
      _wgpuRenderPassEncoderPopDebugGroupPtr
          .asFunction<void Function(WGPURenderPassEncoder)>();

  void wgpuRenderPassEncoderPushDebugGroup(
    WGPURenderPassEncoder renderPassEncoder,
    ffi.Pointer<ffi.Int8> groupLabel,
  ) {
    return _wgpuRenderPassEncoderPushDebugGroup(
      renderPassEncoder,
      groupLabel,
    );
  }

  late final _wgpuRenderPassEncoderPushDebugGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder,
              ffi.Pointer<ffi.Int8>)>>('wgpuRenderPassEncoderPushDebugGroup');
  late final _wgpuRenderPassEncoderPushDebugGroup =
      _wgpuRenderPassEncoderPushDebugGroupPtr.asFunction<
          void Function(WGPURenderPassEncoder, ffi.Pointer<ffi.Int8>)>();

  void wgpuRenderPassEncoderSetBindGroup(
    WGPURenderPassEncoder renderPassEncoder,
    int groupIndex,
    WGPUBindGroup group,
    int dynamicOffsetCount,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
  ) {
    return _wgpuRenderPassEncoderSetBindGroup(
      renderPassEncoder,
      groupIndex,
      group,
      dynamicOffsetCount,
      dynamicOffsets,
    );
  }

  late final _wgpuRenderPassEncoderSetBindGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderPassEncoder,
              ffi.Uint32,
              WGPUBindGroup,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('wgpuRenderPassEncoderSetBindGroup');
  late final _wgpuRenderPassEncoderSetBindGroup =
      _wgpuRenderPassEncoderSetBindGroupPtr.asFunction<
          void Function(WGPURenderPassEncoder, int, WGPUBindGroup, int,
              ffi.Pointer<ffi.Uint32>)>();

  void wgpuRenderPassEncoderSetBlendConstant(
    WGPURenderPassEncoder renderPassEncoder,
    ffi.Pointer<WGPUColor> color,
  ) {
    return _wgpuRenderPassEncoderSetBlendConstant(
      renderPassEncoder,
      color,
    );
  }

  late final _wgpuRenderPassEncoderSetBlendConstantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGPURenderPassEncoder, ffi.Pointer<WGPUColor>)>>(
      'wgpuRenderPassEncoderSetBlendConstant');
  late final _wgpuRenderPassEncoderSetBlendConstant =
      _wgpuRenderPassEncoderSetBlendConstantPtr.asFunction<
          void Function(WGPURenderPassEncoder, ffi.Pointer<WGPUColor>)>();

  void wgpuRenderPassEncoderSetIndexBuffer(
    WGPURenderPassEncoder renderPassEncoder,
    WGPUBuffer buffer,
    int format,
    int offset,
    int size,
  ) {
    return _wgpuRenderPassEncoderSetIndexBuffer(
      renderPassEncoder,
      buffer,
      format,
      offset,
      size,
    );
  }

  late final _wgpuRenderPassEncoderSetIndexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, WGPUBuffer, ffi.Int32,
              ffi.Uint64, ffi.Uint64)>>('wgpuRenderPassEncoderSetIndexBuffer');
  late final _wgpuRenderPassEncoderSetIndexBuffer =
      _wgpuRenderPassEncoderSetIndexBufferPtr.asFunction<
          void Function(WGPURenderPassEncoder, WGPUBuffer, int, int, int)>();

  void wgpuRenderPassEncoderSetPipeline(
    WGPURenderPassEncoder renderPassEncoder,
    WGPURenderPipeline pipeline,
  ) {
    return _wgpuRenderPassEncoderSetPipeline(
      renderPassEncoder,
      pipeline,
    );
  }

  late final _wgpuRenderPassEncoderSetPipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder,
              WGPURenderPipeline)>>('wgpuRenderPassEncoderSetPipeline');
  late final _wgpuRenderPassEncoderSetPipeline =
      _wgpuRenderPassEncoderSetPipelinePtr.asFunction<
          void Function(WGPURenderPassEncoder, WGPURenderPipeline)>();

  void wgpuRenderPassEncoderSetScissorRect(
    WGPURenderPassEncoder renderPassEncoder,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _wgpuRenderPassEncoderSetScissorRect(
      renderPassEncoder,
      x,
      y,
      width,
      height,
    );
  }

  late final _wgpuRenderPassEncoderSetScissorRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpuRenderPassEncoderSetScissorRect');
  late final _wgpuRenderPassEncoderSetScissorRect =
      _wgpuRenderPassEncoderSetScissorRectPtr.asFunction<
          void Function(WGPURenderPassEncoder, int, int, int, int)>();

  void wgpuRenderPassEncoderSetStencilReference(
    WGPURenderPassEncoder renderPassEncoder,
    int reference,
  ) {
    return _wgpuRenderPassEncoderSetStencilReference(
      renderPassEncoder,
      reference,
    );
  }

  late final _wgpuRenderPassEncoderSetStencilReferencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder,
              ffi.Uint32)>>('wgpuRenderPassEncoderSetStencilReference');
  late final _wgpuRenderPassEncoderSetStencilReference =
      _wgpuRenderPassEncoderSetStencilReferencePtr
          .asFunction<void Function(WGPURenderPassEncoder, int)>();

  void wgpuRenderPassEncoderSetVertexBuffer(
    WGPURenderPassEncoder renderPassEncoder,
    int slot,
    WGPUBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpuRenderPassEncoderSetVertexBuffer(
      renderPassEncoder,
      slot,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpuRenderPassEncoderSetVertexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPassEncoder, ffi.Uint32, WGPUBuffer,
              ffi.Uint64, ffi.Uint64)>>('wgpuRenderPassEncoderSetVertexBuffer');
  late final _wgpuRenderPassEncoderSetVertexBuffer =
      _wgpuRenderPassEncoderSetVertexBufferPtr.asFunction<
          void Function(WGPURenderPassEncoder, int, WGPUBuffer, int, int)>();

  void wgpuRenderPassEncoderSetViewport(
    WGPURenderPassEncoder renderPassEncoder,
    double x,
    double y,
    double width,
    double height,
    double minDepth,
    double maxDepth,
  ) {
    return _wgpuRenderPassEncoderSetViewport(
      renderPassEncoder,
      x,
      y,
      width,
      height,
      minDepth,
      maxDepth,
    );
  }

  late final _wgpuRenderPassEncoderSetViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderPassEncoder,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('wgpuRenderPassEncoderSetViewport');
  late final _wgpuRenderPassEncoderSetViewport =
      _wgpuRenderPassEncoderSetViewportPtr.asFunction<
          void Function(WGPURenderPassEncoder, double, double, double, double,
              double, double)>();

  WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(
    WGPURenderPipeline renderPipeline,
    int groupIndex,
  ) {
    return _wgpuRenderPipelineGetBindGroupLayout(
      renderPipeline,
      groupIndex,
    );
  }

  late final _wgpuRenderPipelineGetBindGroupLayoutPtr = _lookup<
      ffi.NativeFunction<
          WGPUBindGroupLayout Function(WGPURenderPipeline,
              ffi.Uint32)>>('wgpuRenderPipelineGetBindGroupLayout');
  late final _wgpuRenderPipelineGetBindGroupLayout =
      _wgpuRenderPipelineGetBindGroupLayoutPtr
          .asFunction<WGPUBindGroupLayout Function(WGPURenderPipeline, int)>();

  void wgpuRenderPipelineSetLabel(
    WGPURenderPipeline renderPipeline,
    ffi.Pointer<ffi.Int8> label,
  ) {
    return _wgpuRenderPipelineSetLabel(
      renderPipeline,
      label,
    );
  }

  late final _wgpuRenderPipelineSetLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPURenderPipeline,
              ffi.Pointer<ffi.Int8>)>>('wgpuRenderPipelineSetLabel');
  late final _wgpuRenderPipelineSetLabel = _wgpuRenderPipelineSetLabelPtr
      .asFunction<void Function(WGPURenderPipeline, ffi.Pointer<ffi.Int8>)>();

  void wgpuShaderModuleGetCompilationInfo(
    WGPUShaderModule shaderModule,
    WGPUCompilationInfoCallback callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _wgpuShaderModuleGetCompilationInfo(
      shaderModule,
      callback,
      userdata,
    );
  }

  late final _wgpuShaderModuleGetCompilationInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUShaderModule, WGPUCompilationInfoCallback,
              ffi.Pointer<ffi.Void>)>>('wgpuShaderModuleGetCompilationInfo');
  late final _wgpuShaderModuleGetCompilationInfo =
      _wgpuShaderModuleGetCompilationInfoPtr.asFunction<
          void Function(WGPUShaderModule, WGPUCompilationInfoCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpuShaderModuleSetLabel(
    WGPUShaderModule shaderModule,
    ffi.Pointer<ffi.Int8> label,
  ) {
    return _wgpuShaderModuleSetLabel(
      shaderModule,
      label,
    );
  }

  late final _wgpuShaderModuleSetLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGPUShaderModule,
              ffi.Pointer<ffi.Int8>)>>('wgpuShaderModuleSetLabel');
  late final _wgpuShaderModuleSetLabel = _wgpuShaderModuleSetLabelPtr
      .asFunction<void Function(WGPUShaderModule, ffi.Pointer<ffi.Int8>)>();

  int wgpuSurfaceGetPreferredFormat(
    WGPUSurface surface,
    WGPUAdapter adapter,
  ) {
    return _wgpuSurfaceGetPreferredFormat(
      surface,
      adapter,
    );
  }

  late final _wgpuSurfaceGetPreferredFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(WGPUSurface, WGPUAdapter)>>(
          'wgpuSurfaceGetPreferredFormat');
  late final _wgpuSurfaceGetPreferredFormat = _wgpuSurfaceGetPreferredFormatPtr
      .asFunction<int Function(WGPUSurface, WGPUAdapter)>();

  WGPUTextureView wgpuSwapChainGetCurrentTextureView(
    WGPUSwapChain swapChain,
  ) {
    return _wgpuSwapChainGetCurrentTextureView(
      swapChain,
    );
  }

  late final _wgpuSwapChainGetCurrentTextureViewPtr =
      _lookup<ffi.NativeFunction<WGPUTextureView Function(WGPUSwapChain)>>(
          'wgpuSwapChainGetCurrentTextureView');
  late final _wgpuSwapChainGetCurrentTextureView =
      _wgpuSwapChainGetCurrentTextureViewPtr
          .asFunction<WGPUTextureView Function(WGPUSwapChain)>();

  void wgpuSwapChainPresent(
    WGPUSwapChain swapChain,
  ) {
    return _wgpuSwapChainPresent(
      swapChain,
    );
  }

  late final _wgpuSwapChainPresentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUSwapChain)>>(
          'wgpuSwapChainPresent');
  late final _wgpuSwapChainPresent =
      _wgpuSwapChainPresentPtr.asFunction<void Function(WGPUSwapChain)>();

  WGPUTextureView wgpuTextureCreateView(
    WGPUTexture texture,
    ffi.Pointer<WGPUTextureViewDescriptor> descriptor,
  ) {
    return _wgpuTextureCreateView(
      texture,
      descriptor,
    );
  }

  late final _wgpuTextureCreateViewPtr = _lookup<
          ffi.NativeFunction<
              WGPUTextureView Function(
                  WGPUTexture, ffi.Pointer<WGPUTextureViewDescriptor>)>>(
      'wgpuTextureCreateView');
  late final _wgpuTextureCreateView = _wgpuTextureCreateViewPtr.asFunction<
      WGPUTextureView Function(
          WGPUTexture, ffi.Pointer<WGPUTextureViewDescriptor>)>();

  void wgpuTextureDestroy(
    WGPUTexture texture,
  ) {
    return _wgpuTextureDestroy(
      texture,
    );
  }

  late final _wgpuTextureDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUTexture)>>(
          'wgpuTextureDestroy');
  late final _wgpuTextureDestroy =
      _wgpuTextureDestroyPtr.asFunction<void Function(WGPUTexture)>();

  void wgpuDevicePoll(
    WGPUDevice device,
    bool force_wait,
  ) {
    return _wgpuDevicePoll(
      device,
      force_wait,
    );
  }

  late final _wgpuDevicePollPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGPUDevice, ffi.Bool)>>(
      'wgpuDevicePoll');
  late final _wgpuDevicePoll = _wgpuDevicePollPtr
      .asFunction<void Function(WGPUDevice, bool)>();

  void wgpuSetLogCallback(
    WGPULogCallback callback,
  ) {
    return _wgpuSetLogCallback(
      callback,
    );
  }

  late final _wgpuSetLogCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPULogCallback)>>(
          'wgpuSetLogCallback');
  late final _wgpuSetLogCallback =
      _wgpuSetLogCallbackPtr.asFunction<void Function(WGPULogCallback)>();

  void wgpuSetLogLevel(
    int level,
  ) {
    return _wgpuSetLogLevel(
      level,
    );
  }

  late final _wgpuSetLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'wgpuSetLogLevel');
  late final _wgpuSetLogLevel =
      _wgpuSetLogLevelPtr.asFunction<void Function(int)>();

  int wgpuGetVersion() {
    return _wgpuGetVersion();
  }

  late final _wgpuGetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('wgpuGetVersion');
  late final _wgpuGetVersion = _wgpuGetVersionPtr.asFunction<int Function()>();

  void wgpuRenderPassEncoderSetPushConstants(
    WGPURenderPassEncoder encoder,
    int stages,
    int offset,
    int sizeBytes,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wgpuRenderPassEncoderSetPushConstants(
      encoder,
      stages,
      offset,
      sizeBytes,
      data,
    );
  }

  late final _wgpuRenderPassEncoderSetPushConstantsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGPURenderPassEncoder,
              WGPUShaderStageFlags,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wgpuRenderPassEncoderSetPushConstants');
  late final _wgpuRenderPassEncoderSetPushConstants =
      _wgpuRenderPassEncoderSetPushConstantsPtr.asFunction<
          void Function(
              WGPURenderPassEncoder, int, int, int, ffi.Pointer<ffi.Void>)>();

  void wgpuBufferDrop(
    WGPUBuffer buffer,
  ) {
    return _wgpuBufferDrop(
      buffer,
    );
  }

  late final _wgpuBufferDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUBuffer)>>(
          'wgpuBufferDrop');
  late final _wgpuBufferDrop =
      _wgpuBufferDropPtr.asFunction<void Function(WGPUBuffer)>();

  void wgpuCommandEncoderDrop(
    WGPUCommandEncoder commandEncoder,
  ) {
    return _wgpuCommandEncoderDrop(
      commandEncoder,
    );
  }

  late final _wgpuCommandEncoderDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUCommandEncoder)>>(
          'wgpuCommandEncoderDrop');
  late final _wgpuCommandEncoderDrop = _wgpuCommandEncoderDropPtr
      .asFunction<void Function(WGPUCommandEncoder)>();

  void wgpuDeviceDrop(
    WGPUDevice device,
  ) {
    return _wgpuDeviceDrop(
      device,
    );
  }

  late final _wgpuDeviceDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUDevice)>>(
          'wgpuDeviceDrop');
  late final _wgpuDeviceDrop =
      _wgpuDeviceDropPtr.asFunction<void Function(WGPUDevice)>();

  void wgpuQuerySetDrop(
    WGPUQuerySet querySet,
  ) {
    return _wgpuQuerySetDrop(
      querySet,
    );
  }

  late final _wgpuQuerySetDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUQuerySet)>>(
          'wgpuQuerySetDrop');
  late final _wgpuQuerySetDrop =
      _wgpuQuerySetDropPtr.asFunction<void Function(WGPUQuerySet)>();

  void wgpuRenderPipelineDrop(
    WGPURenderPipeline renderPipeline,
  ) {
    return _wgpuRenderPipelineDrop(
      renderPipeline,
    );
  }

  late final _wgpuRenderPipelineDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderPipeline)>>(
          'wgpuRenderPipelineDrop');
  late final _wgpuRenderPipelineDrop = _wgpuRenderPipelineDropPtr
      .asFunction<void Function(WGPURenderPipeline)>();

  void wgpuTextureDrop(
    WGPUTexture texture,
  ) {
    return _wgpuTextureDrop(
      texture,
    );
  }

  late final _wgpuTextureDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUTexture)>>(
          'wgpuTextureDrop');
  late final _wgpuTextureDrop =
      _wgpuTextureDropPtr.asFunction<void Function(WGPUTexture)>();

  void wgpuTextureViewDrop(
    WGPUTextureView textureView,
  ) {
    return _wgpuTextureViewDrop(
      textureView,
    );
  }

  late final _wgpuTextureViewDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUTextureView)>>(
          'wgpuTextureViewDrop');
  late final _wgpuTextureViewDrop =
      _wgpuTextureViewDropPtr.asFunction<void Function(WGPUTextureView)>();

  void wgpuSamplerDrop(
    WGPUSampler sampler,
  ) {
    return _wgpuSamplerDrop(
      sampler,
    );
  }

  late final _wgpuSamplerDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUSampler)>>(
          'wgpuSamplerDrop');
  late final _wgpuSamplerDrop =
      _wgpuSamplerDropPtr.asFunction<void Function(WGPUSampler)>();

  void wgpuBindGroupLayoutDrop(
    WGPUBindGroupLayout bindGroupLayout,
  ) {
    return _wgpuBindGroupLayoutDrop(
      bindGroupLayout,
    );
  }

  late final _wgpuBindGroupLayoutDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUBindGroupLayout)>>(
          'wgpuBindGroupLayoutDrop');
  late final _wgpuBindGroupLayoutDrop = _wgpuBindGroupLayoutDropPtr
      .asFunction<void Function(WGPUBindGroupLayout)>();

  void wgpuPipelineLayoutDrop(
    WGPUPipelineLayout pipelineLayout,
  ) {
    return _wgpuPipelineLayoutDrop(
      pipelineLayout,
    );
  }

  late final _wgpuPipelineLayoutDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUPipelineLayout)>>(
          'wgpuPipelineLayoutDrop');
  late final _wgpuPipelineLayoutDrop = _wgpuPipelineLayoutDropPtr
      .asFunction<void Function(WGPUPipelineLayout)>();

  void wgpuBindGroupDrop(
    WGPUBindGroup bindGroup,
  ) {
    return _wgpuBindGroupDrop(
      bindGroup,
    );
  }

  late final _wgpuBindGroupDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUBindGroup)>>(
          'wgpuBindGroupDrop');
  late final _wgpuBindGroupDrop =
      _wgpuBindGroupDropPtr.asFunction<void Function(WGPUBindGroup)>();

  void wgpuShaderModuleDrop(
    WGPUShaderModule shaderModule,
  ) {
    return _wgpuShaderModuleDrop(
      shaderModule,
    );
  }

  late final _wgpuShaderModuleDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUShaderModule)>>(
          'wgpuShaderModuleDrop');
  late final _wgpuShaderModuleDrop =
      _wgpuShaderModuleDropPtr.asFunction<void Function(WGPUShaderModule)>();

  void wgpuCommandBufferDrop(
    WGPUCommandBuffer commandBuffer,
  ) {
    return _wgpuCommandBufferDrop(
      commandBuffer,
    );
  }

  late final _wgpuCommandBufferDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUCommandBuffer)>>(
          'wgpuCommandBufferDrop');
  late final _wgpuCommandBufferDrop =
      _wgpuCommandBufferDropPtr.asFunction<void Function(WGPUCommandBuffer)>();

  void wgpuRenderBundleDrop(
    WGPURenderBundle renderBundle,
  ) {
    return _wgpuRenderBundleDrop(
      renderBundle,
    );
  }

  late final _wgpuRenderBundleDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPURenderBundle)>>(
          'wgpuRenderBundleDrop');
  late final _wgpuRenderBundleDrop =
      _wgpuRenderBundleDropPtr.asFunction<void Function(WGPURenderBundle)>();

  void wgpuComputePipelineDrop(
    WGPUComputePipeline computePipeline,
  ) {
    return _wgpuComputePipelineDrop(
      computePipeline,
    );
  }

  late final _wgpuComputePipelineDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGPUComputePipeline)>>(
          'wgpuComputePipelineDrop');
  late final _wgpuComputePipelineDrop = _wgpuComputePipelineDropPtr
      .asFunction<void Function(WGPUComputePipeline)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class WGPUAdapterImpl extends ffi.Opaque {}

class WGPUBindGroupImpl extends ffi.Opaque {}

class WGPUBindGroupLayoutImpl extends ffi.Opaque {}

class WGPUBufferImpl extends ffi.Opaque {}

class WGPUCommandBufferImpl extends ffi.Opaque {}

class WGPUCommandEncoderImpl extends ffi.Opaque {}

class WGPUComputePassEncoderImpl extends ffi.Opaque {}

class WGPUComputePipelineImpl extends ffi.Opaque {}

class WGPUDeviceImpl extends ffi.Opaque {}

class WGPUInstanceImpl extends ffi.Opaque {}

class WGPUPipelineLayoutImpl extends ffi.Opaque {}

class WGPUQuerySetImpl extends ffi.Opaque {}

class WGPUQueueImpl extends ffi.Opaque {}

class WGPURenderBundleImpl extends ffi.Opaque {}

class WGPURenderBundleEncoderImpl extends ffi.Opaque {}

class WGPURenderPassEncoderImpl extends ffi.Opaque {}

class WGPURenderPipelineImpl extends ffi.Opaque {}

class WGPUSamplerImpl extends ffi.Opaque {}

class WGPUShaderModuleImpl extends ffi.Opaque {}

class WGPUSurfaceImpl extends ffi.Opaque {}

class WGPUSwapChainImpl extends ffi.Opaque {}

class WGPUTextureImpl extends ffi.Opaque {}

class WGPUTextureViewImpl extends ffi.Opaque {}

abstract class WGPUAdapterType {
  static const int WGPUAdapterType_DiscreteGPU = 0;
  static const int WGPUAdapterType_IntegratedGPU = 1;
  static const int WGPUAdapterType_CPU = 2;
  static const int WGPUAdapterType_Unknown = 3;
  static const int WGPUAdapterType_Force32 = 2147483647;
}

abstract class WGPUAddressMode {
  static const int WGPUAddressMode_Repeat = 0;
  static const int WGPUAddressMode_MirrorRepeat = 1;
  static const int WGPUAddressMode_ClampToEdge = 2;
  static const int WGPUAddressMode_Force32 = 2147483647;
}

abstract class WGPUBackendType {
  static const int WGPUBackendType_Null = 0;
  static const int WGPUBackendType_WebGPU = 1;
  static const int WGPUBackendType_D3D11 = 2;
  static const int WGPUBackendType_D3D12 = 3;
  static const int WGPUBackendType_Metal = 4;
  static const int WGPUBackendType_Vulkan = 5;
  static const int WGPUBackendType_OpenGL = 6;
  static const int WGPUBackendType_OpenGLES = 7;
  static const int WGPUBackendType_Force32 = 2147483647;
}

abstract class WGPUBlendFactor {
  static const int WGPUBlendFactor_Zero = 0;
  static const int WGPUBlendFactor_One = 1;
  static const int WGPUBlendFactor_Src = 2;
  static const int WGPUBlendFactor_OneMinusSrc = 3;
  static const int WGPUBlendFactor_SrcAlpha = 4;
  static const int WGPUBlendFactor_OneMinusSrcAlpha = 5;
  static const int WGPUBlendFactor_Dst = 6;
  static const int WGPUBlendFactor_OneMinusDst = 7;
  static const int WGPUBlendFactor_DstAlpha = 8;
  static const int WGPUBlendFactor_OneMinusDstAlpha = 9;
  static const int WGPUBlendFactor_SrcAlphaSaturated = 10;
  static const int WGPUBlendFactor_Constant = 11;
  static const int WGPUBlendFactor_OneMinusConstant = 12;
  static const int WGPUBlendFactor_Force32 = 2147483647;
}

abstract class WGPUBlendOperation {
  static const int WGPUBlendOperation_Add = 0;
  static const int WGPUBlendOperation_Subtract = 1;
  static const int WGPUBlendOperation_ReverseSubtract = 2;
  static const int WGPUBlendOperation_Min = 3;
  static const int WGPUBlendOperation_Max = 4;
  static const int WGPUBlendOperation_Force32 = 2147483647;
}

abstract class WGPUBufferBindingType {
  static const int WGPUBufferBindingType_Undefined = 0;
  static const int WGPUBufferBindingType_Uniform = 1;
  static const int WGPUBufferBindingType_Storage = 2;
  static const int WGPUBufferBindingType_ReadOnlyStorage = 3;
  static const int WGPUBufferBindingType_Force32 = 2147483647;
}

abstract class WGPUBufferMapAsyncStatus {
  static const int WGPUBufferMapAsyncStatus_Success = 0;
  static const int WGPUBufferMapAsyncStatus_Error = 1;
  static const int WGPUBufferMapAsyncStatus_Unknown = 2;
  static const int WGPUBufferMapAsyncStatus_DeviceLost = 3;
  static const int WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 4;
  static const int WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 5;
  static const int WGPUBufferMapAsyncStatus_Force32 = 2147483647;
}

abstract class WGPUCompareFunction {
  static const int WGPUCompareFunction_Undefined = 0;
  static const int WGPUCompareFunction_Never = 1;
  static const int WGPUCompareFunction_Less = 2;
  static const int WGPUCompareFunction_LessEqual = 3;
  static const int WGPUCompareFunction_Greater = 4;
  static const int WGPUCompareFunction_GreaterEqual = 5;
  static const int WGPUCompareFunction_Equal = 6;
  static const int WGPUCompareFunction_NotEqual = 7;
  static const int WGPUCompareFunction_Always = 8;
  static const int WGPUCompareFunction_Force32 = 2147483647;
}

abstract class WGPUCompilationInfoRequestStatus {
  static const int WGPUCompilationInfoRequestStatus_Success = 0;
  static const int WGPUCompilationInfoRequestStatus_Error = 1;
  static const int WGPUCompilationInfoRequestStatus_DeviceLost = 2;
  static const int WGPUCompilationInfoRequestStatus_Unknown = 3;
  static const int WGPUCompilationInfoRequestStatus_Force32 = 2147483647;
}

abstract class WGPUCompilationMessageType {
  static const int WGPUCompilationMessageType_Error = 0;
  static const int WGPUCompilationMessageType_Warning = 1;
  static const int WGPUCompilationMessageType_Info = 2;
  static const int WGPUCompilationMessageType_Force32 = 2147483647;
}

abstract class WGPUComputePassTimestampLocation {
  static const int WGPUComputePassTimestampLocation_Beginning = 0;
  static const int WGPUComputePassTimestampLocation_End = 1;
  static const int WGPUComputePassTimestampLocation_Force32 = 2147483647;
}

abstract class WGPUCreatePipelineAsyncStatus {
  static const int WGPUCreatePipelineAsyncStatus_Success = 0;
  static const int WGPUCreatePipelineAsyncStatus_Error = 1;
  static const int WGPUCreatePipelineAsyncStatus_DeviceLost = 2;
  static const int WGPUCreatePipelineAsyncStatus_DeviceDestroyed = 3;
  static const int WGPUCreatePipelineAsyncStatus_Unknown = 4;
  static const int WGPUCreatePipelineAsyncStatus_Force32 = 2147483647;
}

abstract class WGPUCullMode {
  static const int WGPUCullMode_None = 0;
  static const int WGPUCullMode_Front = 1;
  static const int WGPUCullMode_Back = 2;
  static const int WGPUCullMode_Force32 = 2147483647;
}

abstract class WGPUDeviceLostReason {
  static const int WGPUDeviceLostReason_Undefined = 0;
  static const int WGPUDeviceLostReason_Destroyed = 1;
  static const int WGPUDeviceLostReason_Force32 = 2147483647;
}

abstract class WGPUErrorFilter {
  static const int WGPUErrorFilter_Validation = 0;
  static const int WGPUErrorFilter_OutOfMemory = 1;
  static const int WGPUErrorFilter_Force32 = 2147483647;
}

abstract class WGPUErrorType {
  static const int WGPUErrorType_NoError = 0;
  static const int WGPUErrorType_Validation = 1;
  static const int WGPUErrorType_OutOfMemory = 2;
  static const int WGPUErrorType_Unknown = 3;
  static const int WGPUErrorType_DeviceLost = 4;
  static const int WGPUErrorType_Force32 = 2147483647;
}

abstract class WGPUFeatureName {
  static const int WGPUFeatureName_Undefined = 0;
  static const int WGPUFeatureName_DepthClipControl = 1;
  static const int WGPUFeatureName_Depth24UnormStencil8 = 2;
  static const int WGPUFeatureName_Depth32FloatStencil8 = 3;
  static const int WGPUFeatureName_TimestampQuery = 4;
  static const int WGPUFeatureName_PipelineStatisticsQuery = 5;
  static const int WGPUFeatureName_TextureCompressionBC = 6;
  static const int WGPUFeatureName_TextureCompressionETC2 = 7;
  static const int WGPUFeatureName_TextureCompressionASTC = 8;
  static const int WGPUFeatureName_IndirectFirstInstance = 9;
  static const int WGPUFeatureName_Force32 = 2147483647;
}

abstract class WGPUFilterMode {
  static const int WGPUFilterMode_Nearest = 0;
  static const int WGPUFilterMode_Linear = 1;
  static const int WGPUFilterMode_Force32 = 2147483647;
}

abstract class WGPUFrontFace {
  static const int WGPUFrontFace_CCW = 0;
  static const int WGPUFrontFace_CW = 1;
  static const int WGPUFrontFace_Force32 = 2147483647;
}

abstract class WGPUIndexFormat {
  static const int WGPUIndexFormat_Undefined = 0;
  static const int WGPUIndexFormat_Uint16 = 1;
  static const int WGPUIndexFormat_Uint32 = 2;
  static const int WGPUIndexFormat_Force32 = 2147483647;
}

abstract class WGPULoadOp {
  static const int WGPULoadOp_Clear = 0;
  static const int WGPULoadOp_Load = 1;
  static const int WGPULoadOp_Force32 = 2147483647;
}

abstract class WGPUPipelineStatisticName {
  static const int WGPUPipelineStatisticName_VertexShaderInvocations = 0;
  static const int WGPUPipelineStatisticName_ClipperInvocations = 1;
  static const int WGPUPipelineStatisticName_ClipperPrimitivesOut = 2;
  static const int WGPUPipelineStatisticName_FragmentShaderInvocations = 3;
  static const int WGPUPipelineStatisticName_ComputeShaderInvocations = 4;
  static const int WGPUPipelineStatisticName_Force32 = 2147483647;
}

abstract class WGPUPowerPreference {
  static const int WGPUPowerPreference_Undefined = 0;
  static const int WGPUPowerPreference_LowPower = 1;
  static const int WGPUPowerPreference_HighPerformance = 2;
  static const int WGPUPowerPreference_Force32 = 2147483647;
}

abstract class WGPUPresentMode {
  static const int WGPUPresentMode_Immediate = 0;
  static const int WGPUPresentMode_Mailbox = 1;
  static const int WGPUPresentMode_Fifo = 2;
  static const int WGPUPresentMode_Force32 = 2147483647;
}

abstract class WGPUPrimitiveTopology {
  static const int WGPUPrimitiveTopology_PointList = 0;
  static const int WGPUPrimitiveTopology_LineList = 1;
  static const int WGPUPrimitiveTopology_LineStrip = 2;
  static const int WGPUPrimitiveTopology_TriangleList = 3;
  static const int WGPUPrimitiveTopology_TriangleStrip = 4;
  static const int WGPUPrimitiveTopology_Force32 = 2147483647;
}

abstract class WGPUQueryType {
  static const int WGPUQueryType_Occlusion = 0;
  static const int WGPUQueryType_PipelineStatistics = 1;
  static const int WGPUQueryType_Timestamp = 2;
  static const int WGPUQueryType_Force32 = 2147483647;
}

abstract class WGPUQueueWorkDoneStatus {
  static const int WGPUQueueWorkDoneStatus_Success = 0;
  static const int WGPUQueueWorkDoneStatus_Error = 1;
  static const int WGPUQueueWorkDoneStatus_Unknown = 2;
  static const int WGPUQueueWorkDoneStatus_DeviceLost = 3;
  static const int WGPUQueueWorkDoneStatus_Force32 = 2147483647;
}

abstract class WGPURenderPassTimestampLocation {
  static const int WGPURenderPassTimestampLocation_Beginning = 0;
  static const int WGPURenderPassTimestampLocation_End = 1;
  static const int WGPURenderPassTimestampLocation_Force32 = 2147483647;
}

abstract class WGPURequestAdapterStatus {
  static const int WGPURequestAdapterStatus_Success = 0;
  static const int WGPURequestAdapterStatus_Unavailable = 1;
  static const int WGPURequestAdapterStatus_Error = 2;
  static const int WGPURequestAdapterStatus_Unknown = 3;
  static const int WGPURequestAdapterStatus_Force32 = 2147483647;
}

abstract class WGPURequestDeviceStatus {
  static const int WGPURequestDeviceStatus_Success = 0;
  static const int WGPURequestDeviceStatus_Error = 1;
  static const int WGPURequestDeviceStatus_Unknown = 2;
  static const int WGPURequestDeviceStatus_Force32 = 2147483647;
}

abstract class WGPUSType {
  static const int WGPUSType_Invalid = 0;
  static const int WGPUSType_SurfaceDescriptorFromMetalLayer = 1;
  static const int WGPUSType_SurfaceDescriptorFromWindowsHWND = 2;
  static const int WGPUSType_SurfaceDescriptorFromXlib = 3;
  static const int WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector = 4;
  static const int WGPUSType_ShaderModuleSPIRVDescriptor = 5;
  static const int WGPUSType_ShaderModuleWGSLDescriptor = 6;
  static const int WGPUSType_PrimitiveDepthClipControl = 7;
  static const int WGPUSType_SurfaceDescriptorFromWaylandSurface = 8;
  static const int WGPUSType_SurfaceDescriptorFromAndroidNativeWindow = 9;
  static const int WGPUSType_Force32 = 2147483647;
}

abstract class WGPUSamplerBindingType {
  static const int WGPUSamplerBindingType_Undefined = 0;
  static const int WGPUSamplerBindingType_Filtering = 1;
  static const int WGPUSamplerBindingType_NonFiltering = 2;
  static const int WGPUSamplerBindingType_Comparison = 3;
  static const int WGPUSamplerBindingType_Force32 = 2147483647;
}

abstract class WGPUStencilOperation {
  static const int WGPUStencilOperation_Keep = 0;
  static const int WGPUStencilOperation_Zero = 1;
  static const int WGPUStencilOperation_Replace = 2;
  static const int WGPUStencilOperation_Invert = 3;
  static const int WGPUStencilOperation_IncrementClamp = 4;
  static const int WGPUStencilOperation_DecrementClamp = 5;
  static const int WGPUStencilOperation_IncrementWrap = 6;
  static const int WGPUStencilOperation_DecrementWrap = 7;
  static const int WGPUStencilOperation_Force32 = 2147483647;
}

abstract class WGPUStorageTextureAccess {
  static const int WGPUStorageTextureAccess_Undefined = 0;
  static const int WGPUStorageTextureAccess_WriteOnly = 1;
  static const int WGPUStorageTextureAccess_Force32 = 2147483647;
}

abstract class WGPUStoreOp {
  static const int WGPUStoreOp_Store = 0;
  static const int WGPUStoreOp_Discard = 1;
  static const int WGPUStoreOp_Force32 = 2147483647;
}

abstract class WGPUTextureAspect {
  static const int WGPUTextureAspect_All = 0;
  static const int WGPUTextureAspect_StencilOnly = 1;
  static const int WGPUTextureAspect_DepthOnly = 2;
  static const int WGPUTextureAspect_Force32 = 2147483647;
}

abstract class WGPUTextureComponentType {
  static const int WGPUTextureComponentType_Float = 0;
  static const int WGPUTextureComponentType_Sint = 1;
  static const int WGPUTextureComponentType_Uint = 2;
  static const int WGPUTextureComponentType_DepthComparison = 3;
  static const int WGPUTextureComponentType_Force32 = 2147483647;
}

abstract class WGPUTextureDimension {
  static const int WGPUTextureDimension_1D = 0;
  static const int WGPUTextureDimension_2D = 1;
  static const int WGPUTextureDimension_3D = 2;
  static const int WGPUTextureDimension_Force32 = 2147483647;
}

abstract class WGPUTextureFormat {
  static const int WGPUTextureFormat_Undefined = 0;
  static const int WGPUTextureFormat_R8Unorm = 1;
  static const int WGPUTextureFormat_R8Snorm = 2;
  static const int WGPUTextureFormat_R8Uint = 3;
  static const int WGPUTextureFormat_R8Sint = 4;
  static const int WGPUTextureFormat_R16Uint = 5;
  static const int WGPUTextureFormat_R16Sint = 6;
  static const int WGPUTextureFormat_R16Float = 7;
  static const int WGPUTextureFormat_RG8Unorm = 8;
  static const int WGPUTextureFormat_RG8Snorm = 9;
  static const int WGPUTextureFormat_RG8Uint = 10;
  static const int WGPUTextureFormat_RG8Sint = 11;
  static const int WGPUTextureFormat_R32Float = 12;
  static const int WGPUTextureFormat_R32Uint = 13;
  static const int WGPUTextureFormat_R32Sint = 14;
  static const int WGPUTextureFormat_RG16Uint = 15;
  static const int WGPUTextureFormat_RG16Sint = 16;
  static const int WGPUTextureFormat_RG16Float = 17;
  static const int WGPUTextureFormat_RGBA8Unorm = 18;
  static const int WGPUTextureFormat_RGBA8UnormSrgb = 19;
  static const int WGPUTextureFormat_RGBA8Snorm = 20;
  static const int WGPUTextureFormat_RGBA8Uint = 21;
  static const int WGPUTextureFormat_RGBA8Sint = 22;
  static const int WGPUTextureFormat_BGRA8Unorm = 23;
  static const int WGPUTextureFormat_BGRA8UnormSrgb = 24;
  static const int WGPUTextureFormat_RGB10A2Unorm = 25;
  static const int WGPUTextureFormat_RG11B10Ufloat = 26;
  static const int WGPUTextureFormat_RGB9E5Ufloat = 27;
  static const int WGPUTextureFormat_RG32Float = 28;
  static const int WGPUTextureFormat_RG32Uint = 29;
  static const int WGPUTextureFormat_RG32Sint = 30;
  static const int WGPUTextureFormat_RGBA16Uint = 31;
  static const int WGPUTextureFormat_RGBA16Sint = 32;
  static const int WGPUTextureFormat_RGBA16Float = 33;
  static const int WGPUTextureFormat_RGBA32Float = 34;
  static const int WGPUTextureFormat_RGBA32Uint = 35;
  static const int WGPUTextureFormat_RGBA32Sint = 36;
  static const int WGPUTextureFormat_Stencil8 = 37;
  static const int WGPUTextureFormat_Depth16Unorm = 38;
  static const int WGPUTextureFormat_Depth24Plus = 39;
  static const int WGPUTextureFormat_Depth24PlusStencil8 = 40;
  static const int WGPUTextureFormat_Depth24UnormStencil8 = 41;
  static const int WGPUTextureFormat_Depth32Float = 42;
  static const int WGPUTextureFormat_Depth32FloatStencil8 = 43;
  static const int WGPUTextureFormat_BC1RGBAUnorm = 44;
  static const int WGPUTextureFormat_BC1RGBAUnormSrgb = 45;
  static const int WGPUTextureFormat_BC2RGBAUnorm = 46;
  static const int WGPUTextureFormat_BC2RGBAUnormSrgb = 47;
  static const int WGPUTextureFormat_BC3RGBAUnorm = 48;
  static const int WGPUTextureFormat_BC3RGBAUnormSrgb = 49;
  static const int WGPUTextureFormat_BC4RUnorm = 50;
  static const int WGPUTextureFormat_BC4RSnorm = 51;
  static const int WGPUTextureFormat_BC5RGUnorm = 52;
  static const int WGPUTextureFormat_BC5RGSnorm = 53;
  static const int WGPUTextureFormat_BC6HRGBUfloat = 54;
  static const int WGPUTextureFormat_BC6HRGBFloat = 55;
  static const int WGPUTextureFormat_BC7RGBAUnorm = 56;
  static const int WGPUTextureFormat_BC7RGBAUnormSrgb = 57;
  static const int WGPUTextureFormat_ETC2RGB8Unorm = 58;
  static const int WGPUTextureFormat_ETC2RGB8UnormSrgb = 59;
  static const int WGPUTextureFormat_ETC2RGB8A1Unorm = 60;
  static const int WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 61;
  static const int WGPUTextureFormat_ETC2RGBA8Unorm = 62;
  static const int WGPUTextureFormat_ETC2RGBA8UnormSrgb = 63;
  static const int WGPUTextureFormat_EACR11Unorm = 64;
  static const int WGPUTextureFormat_EACR11Snorm = 65;
  static const int WGPUTextureFormat_EACRG11Unorm = 66;
  static const int WGPUTextureFormat_EACRG11Snorm = 67;
  static const int WGPUTextureFormat_ASTC4x4Unorm = 68;
  static const int WGPUTextureFormat_ASTC4x4UnormSrgb = 69;
  static const int WGPUTextureFormat_ASTC5x4Unorm = 70;
  static const int WGPUTextureFormat_ASTC5x4UnormSrgb = 71;
  static const int WGPUTextureFormat_ASTC5x5Unorm = 72;
  static const int WGPUTextureFormat_ASTC5x5UnormSrgb = 73;
  static const int WGPUTextureFormat_ASTC6x5Unorm = 74;
  static const int WGPUTextureFormat_ASTC6x5UnormSrgb = 75;
  static const int WGPUTextureFormat_ASTC6x6Unorm = 76;
  static const int WGPUTextureFormat_ASTC6x6UnormSrgb = 77;
  static const int WGPUTextureFormat_ASTC8x5Unorm = 78;
  static const int WGPUTextureFormat_ASTC8x5UnormSrgb = 79;
  static const int WGPUTextureFormat_ASTC8x6Unorm = 80;
  static const int WGPUTextureFormat_ASTC8x6UnormSrgb = 81;
  static const int WGPUTextureFormat_ASTC8x8Unorm = 82;
  static const int WGPUTextureFormat_ASTC8x8UnormSrgb = 83;
  static const int WGPUTextureFormat_ASTC10x5Unorm = 84;
  static const int WGPUTextureFormat_ASTC10x5UnormSrgb = 85;
  static const int WGPUTextureFormat_ASTC10x6Unorm = 86;
  static const int WGPUTextureFormat_ASTC10x6UnormSrgb = 87;
  static const int WGPUTextureFormat_ASTC10x8Unorm = 88;
  static const int WGPUTextureFormat_ASTC10x8UnormSrgb = 89;
  static const int WGPUTextureFormat_ASTC10x10Unorm = 90;
  static const int WGPUTextureFormat_ASTC10x10UnormSrgb = 91;
  static const int WGPUTextureFormat_ASTC12x10Unorm = 92;
  static const int WGPUTextureFormat_ASTC12x10UnormSrgb = 93;
  static const int WGPUTextureFormat_ASTC12x12Unorm = 94;
  static const int WGPUTextureFormat_ASTC12x12UnormSrgb = 95;
  static const int WGPUTextureFormat_Force32 = 2147483647;
}

abstract class WGPUTextureSampleType {
  static const int WGPUTextureSampleType_Undefined = 0;
  static const int WGPUTextureSampleType_Float = 1;
  static const int WGPUTextureSampleType_UnfilterableFloat = 2;
  static const int WGPUTextureSampleType_Depth = 3;
  static const int WGPUTextureSampleType_Sint = 4;
  static const int WGPUTextureSampleType_Uint = 5;
  static const int WGPUTextureSampleType_Force32 = 2147483647;
}

abstract class WGPUTextureViewDimension {
  static const int WGPUTextureViewDimension_Undefined = 0;
  static const int WGPUTextureViewDimension_1D = 1;
  static const int WGPUTextureViewDimension_2D = 2;
  static const int WGPUTextureViewDimension_2DArray = 3;
  static const int WGPUTextureViewDimension_Cube = 4;
  static const int WGPUTextureViewDimension_CubeArray = 5;
  static const int WGPUTextureViewDimension_3D = 6;
  static const int WGPUTextureViewDimension_Force32 = 2147483647;
}

abstract class WGPUVertexFormat {
  static const int WGPUVertexFormat_Undefined = 0;
  static const int WGPUVertexFormat_Uint8x2 = 1;
  static const int WGPUVertexFormat_Uint8x4 = 2;
  static const int WGPUVertexFormat_Sint8x2 = 3;
  static const int WGPUVertexFormat_Sint8x4 = 4;
  static const int WGPUVertexFormat_Unorm8x2 = 5;
  static const int WGPUVertexFormat_Unorm8x4 = 6;
  static const int WGPUVertexFormat_Snorm8x2 = 7;
  static const int WGPUVertexFormat_Snorm8x4 = 8;
  static const int WGPUVertexFormat_Uint16x2 = 9;
  static const int WGPUVertexFormat_Uint16x4 = 10;
  static const int WGPUVertexFormat_Sint16x2 = 11;
  static const int WGPUVertexFormat_Sint16x4 = 12;
  static const int WGPUVertexFormat_Unorm16x2 = 13;
  static const int WGPUVertexFormat_Unorm16x4 = 14;
  static const int WGPUVertexFormat_Snorm16x2 = 15;
  static const int WGPUVertexFormat_Snorm16x4 = 16;
  static const int WGPUVertexFormat_Float16x2 = 17;
  static const int WGPUVertexFormat_Float16x4 = 18;
  static const int WGPUVertexFormat_Float32 = 19;
  static const int WGPUVertexFormat_Float32x2 = 20;
  static const int WGPUVertexFormat_Float32x3 = 21;
  static const int WGPUVertexFormat_Float32x4 = 22;
  static const int WGPUVertexFormat_Uint32 = 23;
  static const int WGPUVertexFormat_Uint32x2 = 24;
  static const int WGPUVertexFormat_Uint32x3 = 25;
  static const int WGPUVertexFormat_Uint32x4 = 26;
  static const int WGPUVertexFormat_Sint32 = 27;
  static const int WGPUVertexFormat_Sint32x2 = 28;
  static const int WGPUVertexFormat_Sint32x3 = 29;
  static const int WGPUVertexFormat_Sint32x4 = 30;
  static const int WGPUVertexFormat_Force32 = 2147483647;
}

abstract class WGPUVertexStepMode {
  static const int WGPUVertexStepMode_Vertex = 0;
  static const int WGPUVertexStepMode_Instance = 1;
  static const int WGPUVertexStepMode_Force32 = 2147483647;
}

abstract class WGPUBufferUsage {
  static const int WGPUBufferUsage_None = 0;
  static const int WGPUBufferUsage_MapRead = 1;
  static const int WGPUBufferUsage_MapWrite = 2;
  static const int WGPUBufferUsage_CopySrc = 4;
  static const int WGPUBufferUsage_CopyDst = 8;
  static const int WGPUBufferUsage_Index = 16;
  static const int WGPUBufferUsage_Vertex = 32;
  static const int WGPUBufferUsage_Uniform = 64;
  static const int WGPUBufferUsage_Storage = 128;
  static const int WGPUBufferUsage_Indirect = 256;
  static const int WGPUBufferUsage_QueryResolve = 512;
  static const int WGPUBufferUsage_Force32 = 2147483647;
}

abstract class WGPUColorWriteMask {
  static const int WGPUColorWriteMask_None = 0;
  static const int WGPUColorWriteMask_Red = 1;
  static const int WGPUColorWriteMask_Green = 2;
  static const int WGPUColorWriteMask_Blue = 4;
  static const int WGPUColorWriteMask_Alpha = 8;
  static const int WGPUColorWriteMask_All = 15;
  static const int WGPUColorWriteMask_Force32 = 2147483647;
}

abstract class WGPUMapMode {
  static const int WGPUMapMode_None = 0;
  static const int WGPUMapMode_Read = 1;
  static const int WGPUMapMode_Write = 2;
  static const int WGPUMapMode_Force32 = 2147483647;
}

abstract class WGPUShaderStage {
  static const int WGPUShaderStage_None = 0;
  static const int WGPUShaderStage_Vertex = 1;
  static const int WGPUShaderStage_Fragment = 2;
  static const int WGPUShaderStage_Compute = 4;
  static const int WGPUShaderStage_Force32 = 2147483647;
}

abstract class WGPUTextureUsage {
  static const int WGPUTextureUsage_None = 0;
  static const int WGPUTextureUsage_CopySrc = 1;
  static const int WGPUTextureUsage_CopyDst = 2;
  static const int WGPUTextureUsage_TextureBinding = 4;
  static const int WGPUTextureUsage_StorageBinding = 8;
  static const int WGPUTextureUsage_RenderAttachment = 16;
  static const int WGPUTextureUsage_Force32 = 2147483647;
}

class WGPUChainedStruct extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> next;

  @ffi.Int32()
  external int sType;
}

class WGPUChainedStructOut extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStructOut> next;

  @ffi.Int32()
  external int sType;
}

class WGPUAdapterProperties extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStructOut> nextInChain;

  @ffi.Uint32()
  external int vendorID;

  @ffi.Uint32()
  external int deviceID;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> driverDescription;

  @ffi.Int32()
  external int adapterType;

  @ffi.Int32()
  external int backendType;
}

class WGPUBindGroupEntry extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint32()
  external int binding;

  external WGPUBuffer buffer;

  @ffi.Uint64()
  external int offset;

  @ffi.Uint64()
  external int size;

  external WGPUSampler sampler;

  external WGPUTextureView textureView;
}

typedef WGPUBuffer = ffi.Pointer<WGPUBufferImpl>;
typedef WGPUSampler = ffi.Pointer<WGPUSamplerImpl>;
typedef WGPUTextureView = ffi.Pointer<WGPUTextureViewImpl>;

class WGPUBlendComponent extends ffi.Struct {
  @ffi.Int32()
  external int operation;

  @ffi.Int32()
  external int srcFactor;

  @ffi.Int32()
  external int dstFactor;
}

class WGPUBufferBindingLayout extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int hasDynamicOffset;

  @ffi.Uint64()
  external int minBindingSize;
}

class WGPUBufferDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @WGPUBufferUsageFlags()
  external int usage;

  @ffi.Uint64()
  external int size;

  @ffi.Int32()
  external int mappedAtCreation;
}

typedef WGPUBufferUsageFlags = WGPUFlags;
typedef WGPUFlags = ffi.Uint32;

class WGPUColor extends ffi.Struct {
  @ffi.Double()
  external double r;

  @ffi.Double()
  external double g;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double a;
}

class WGPUCommandBufferDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;
}

class WGPUCommandEncoderDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;
}

class WGPUCompilationMessage extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> message;

  @ffi.Int32()
  external int type;

  @ffi.Uint64()
  external int lineNum;

  @ffi.Uint64()
  external int linePos;

  @ffi.Uint64()
  external int offset;

  @ffi.Uint64()
  external int length;
}

class WGPUComputePassTimestampWrite extends ffi.Struct {
  external WGPUQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @ffi.Int32()
  external int location;
}

typedef WGPUQuerySet = ffi.Pointer<WGPUQuerySetImpl>;

class WGPUConstantEntry extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> key;

  @ffi.Double()
  external double value;
}

class WGPUExtent3D extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int depthOrArrayLayers;
}

class WGPUInstanceDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;
}

class WGPULimits extends ffi.Struct {
  @ffi.Uint32()
  external int maxTextureDimension1D;

  @ffi.Uint32()
  external int maxTextureDimension2D;

  @ffi.Uint32()
  external int maxTextureDimension3D;

  @ffi.Uint32()
  external int maxTextureArrayLayers;

  @ffi.Uint32()
  external int maxBindGroups;

  @ffi.Uint32()
  external int maxDynamicUniformBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxDynamicStorageBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxSampledTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxSamplersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageBuffersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxUniformBuffersPerShaderStage;

  @ffi.Uint64()
  external int maxUniformBufferBindingSize;

  @ffi.Uint64()
  external int maxStorageBufferBindingSize;

  @ffi.Uint32()
  external int minUniformBufferOffsetAlignment;

  @ffi.Uint32()
  external int minStorageBufferOffsetAlignment;

  @ffi.Uint32()
  external int maxVertexBuffers;

  @ffi.Uint32()
  external int maxVertexAttributes;

  @ffi.Uint32()
  external int maxVertexBufferArrayStride;

  @ffi.Uint32()
  external int maxInterStageShaderComponents;

  @ffi.Uint32()
  external int maxComputeWorkgroupStorageSize;

  @ffi.Uint32()
  external int maxComputeInvocationsPerWorkgroup;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeX;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeY;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeZ;

  @ffi.Uint32()
  external int maxComputeWorkgroupsPerDimension;
}

class WGPUMultisampleState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint32()
  external int count;

  @ffi.Uint32()
  external int mask;

  @ffi.Int32()
  external int alphaToCoverageEnabled;
}

class WGPUOrigin3D extends ffi.Struct {
  @ffi.Uint32()
  external int x;

  @ffi.Uint32()
  external int y;

  @ffi.Uint32()
  external int z;
}

class WGPUPipelineLayoutDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int bindGroupLayoutCount;

  external ffi.Pointer<WGPUBindGroupLayout> bindGroupLayouts;
}

typedef WGPUBindGroupLayout = ffi.Pointer<WGPUBindGroupLayoutImpl>;

class WGPUPrimitiveDepthClipControl extends ffi.Struct {
  external WGPUChainedStruct chain;

  @ffi.Int32()
  external int unclippedDepth;
}

class WGPUPrimitiveState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int topology;

  @ffi.Int32()
  external int stripIndexFormat;

  @ffi.Int32()
  external int frontFace;

  @ffi.Int32()
  external int cullMode;
}

class WGPUQuerySetDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  external int type;

  @ffi.Uint32()
  external int count;

  external ffi.Pointer<ffi.Int32> pipelineStatistics;

  @ffi.Uint32()
  external int pipelineStatisticsCount;
}

class WGPURenderBundleDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;
}

class WGPURenderBundleEncoderDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int colorFormatsCount;

  external ffi.Pointer<ffi.Int32> colorFormats;

  @ffi.Int32()
  external int depthStencilFormat;

  @ffi.Uint32()
  external int sampleCount;

  @ffi.Int32()
  external int depthReadOnly;

  @ffi.Int32()
  external int stencilReadOnly;
}

class WGPURenderPassDepthStencilAttachment extends ffi.Struct {
  external WGPUTextureView view;

  @ffi.Int32()
  external int depthLoadOp;

  @ffi.Int32()
  external int depthStoreOp;

  @ffi.Float()
  external double clearDepth;

  @ffi.Int32()
  external int depthReadOnly;

  @ffi.Int32()
  external int stencilLoadOp;

  @ffi.Int32()
  external int stencilStoreOp;

  @ffi.Uint32()
  external int clearStencil;

  @ffi.Int32()
  external int stencilReadOnly;
}

class WGPURenderPassTimestampWrite extends ffi.Struct {
  external WGPUQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @ffi.Int32()
  external int location;
}

class WGPURequestAdapterOptions extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUSurface compatibleSurface;

  @ffi.Int32()
  external int powerPreference;

  @ffi.Int32()
  external int forceFallbackAdapter;
}

typedef WGPUSurface = ffi.Pointer<WGPUSurfaceImpl>;

class WGPUSamplerBindingLayout extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int type;
}

class WGPUSamplerDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  external int addressModeU;

  @ffi.Int32()
  external int addressModeV;

  @ffi.Int32()
  external int addressModeW;

  @ffi.Int32()
  external int magFilter;

  @ffi.Int32()
  external int minFilter;

  @ffi.Int32()
  external int mipmapFilter;

  @ffi.Float()
  external double lodMinClamp;

  @ffi.Float()
  external double lodMaxClamp;

  @ffi.Int32()
  external int compare;

  @ffi.Uint16()
  external int maxAnisotropy;
}

class WGPUShaderModuleDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;
}

class WGPUShaderModuleSPIRVDescriptor extends ffi.Struct {
  external WGPUChainedStruct chain;

  @ffi.Uint32()
  external int codeSize;

  external ffi.Pointer<ffi.Uint32> code;
}

class WGPUShaderModuleWGSLDescriptor extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Int8> code;
}

class WGPUStencilFaceState extends ffi.Struct {
  @ffi.Int32()
  external int compare;

  @ffi.Int32()
  external int failOp;

  @ffi.Int32()
  external int depthFailOp;

  @ffi.Int32()
  external int passOp;
}

class WGPUStorageTextureBindingLayout extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int access;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int viewDimension;
}

class WGPUSurfaceDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;
}

class WGPUSurfaceDescriptorFromCanvasHTMLSelector extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Int8> selector;
}

class WGPUSurfaceDescriptorFromMetalLayer extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Void> layer;
}

class WGPUSurfaceDescriptorFromWindowsHWND extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Void> hinstance;

  external ffi.Pointer<ffi.Void> hwnd;
}

class WGPUSurfaceDescriptorFromXlib extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Void> display;

  @ffi.Uint32()
  external int window;
}

class WGPUSurfaceDescriptorFromWaylandSurface extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Void> display;

  external ffi.Pointer<ffi.Void> surface;
}

class WGPUSurfaceDescriptorFromAndroidNativeWindow extends ffi.Struct {
  external WGPUChainedStruct chain;

  external ffi.Pointer<ffi.Void> window;
}

class WGPUSwapChainDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @WGPUTextureUsageFlags()
  external int usage;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Int32()
  external int presentMode;
}

typedef WGPUTextureUsageFlags = WGPUFlags;

class WGPUTextureBindingLayout extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int sampleType;

  @ffi.Int32()
  external int viewDimension;

  @ffi.Int32()
  external int multisampled;
}

class WGPUTextureDataLayout extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int bytesPerRow;

  @ffi.Uint32()
  external int rowsPerImage;
}

class WGPUTextureViewDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int dimension;

  @ffi.Uint32()
  external int baseMipLevel;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int baseArrayLayer;

  @ffi.Uint32()
  external int arrayLayerCount;

  @ffi.Int32()
  external int aspect;
}

class WGPUVertexAttribute extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int shaderLocation;
}

class WGPUBindGroupDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  external WGPUBindGroupLayout layout;

  @ffi.Uint32()
  external int entryCount;

  external ffi.Pointer<WGPUBindGroupEntry> entries;
}

class WGPUBindGroupLayoutEntry extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint32()
  external int binding;

  @WGPUShaderStageFlags()
  external int visibility;

  external WGPUBufferBindingLayout buffer;

  external WGPUSamplerBindingLayout sampler;

  external WGPUTextureBindingLayout texture;

  external WGPUStorageTextureBindingLayout storageTexture;
}

typedef WGPUShaderStageFlags = WGPUFlags;

class WGPUBlendState extends ffi.Struct {
  external WGPUBlendComponent color;

  external WGPUBlendComponent alpha;
}

class WGPUCompilationInfo extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Uint32()
  external int messageCount;

  external ffi.Pointer<WGPUCompilationMessage> messages;
}

class WGPUComputePassDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int timestampWriteCount;

  external ffi.Pointer<WGPUComputePassTimestampWrite> timestampWrites;
}

class WGPUDepthStencilState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int depthWriteEnabled;

  @ffi.Int32()
  external int depthCompare;

  external WGPUStencilFaceState stencilFront;

  external WGPUStencilFaceState stencilBack;

  @ffi.Uint32()
  external int stencilReadMask;

  @ffi.Uint32()
  external int stencilWriteMask;

  @ffi.Int32()
  external int depthBias;

  @ffi.Float()
  external double depthBiasSlopeScale;

  @ffi.Float()
  external double depthBiasClamp;
}

class WGPUImageCopyBuffer extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUTextureDataLayout layout;

  external WGPUBuffer buffer;
}

class WGPUImageCopyTexture extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGPUOrigin3D origin;

  @ffi.Int32()
  external int aspect;
}

typedef WGPUTexture = ffi.Pointer<WGPUTextureImpl>;

class WGPUProgrammableStageDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUShaderModule module;

  external ffi.Pointer<ffi.Int8> entryPoint;

  @ffi.Uint32()
  external int constantCount;

  external ffi.Pointer<WGPUConstantEntry> constants;
}

typedef WGPUShaderModule = ffi.Pointer<WGPUShaderModuleImpl>;

class WGPURenderPassColorAttachment extends ffi.Struct {
  external WGPUTextureView view;

  external WGPUTextureView resolveTarget;

  @ffi.Int32()
  external int loadOp;

  @ffi.Int32()
  external int storeOp;

  external WGPUColor clearColor;
}

class WGPURequiredLimits extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPULimits limits;
}

class WGPUSupportedLimits extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStructOut> nextInChain;

  external WGPULimits limits;
}

class WGPUTextureDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @WGPUTextureUsageFlags()
  external int usage;

  @ffi.Int32()
  external int dimension;

  external WGPUExtent3D size;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int sampleCount;
}

class WGPUVertexBufferLayout extends ffi.Struct {
  @ffi.Uint64()
  external int arrayStride;

  @ffi.Int32()
  external int stepMode;

  @ffi.Uint32()
  external int attributeCount;

  external ffi.Pointer<WGPUVertexAttribute> attributes;
}

class WGPUBindGroupLayoutDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int entryCount;

  external ffi.Pointer<WGPUBindGroupLayoutEntry> entries;
}

class WGPUColorTargetState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  @ffi.Int32()
  external int format;

  external ffi.Pointer<WGPUBlendState> blend;

  @WGPUColorWriteMaskFlags()
  external int writeMask;
}

typedef WGPUColorWriteMaskFlags = WGPUFlags;

class WGPUComputePipelineDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  external WGPUPipelineLayout layout;

  external WGPUProgrammableStageDescriptor compute;
}

typedef WGPUPipelineLayout = ffi.Pointer<WGPUPipelineLayoutImpl>;

class WGPUDeviceDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int requiredFeaturesCount;

  external ffi.Pointer<ffi.Int32> requiredFeatures;

  external ffi.Pointer<WGPURequiredLimits> requiredLimits;
}

class WGPURenderPassDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  @ffi.Uint32()
  external int colorAttachmentCount;

  external ffi.Pointer<WGPURenderPassColorAttachment> colorAttachments;

  external ffi.Pointer<WGPURenderPassDepthStencilAttachment>
      depthStencilAttachment;

  external WGPUQuerySet occlusionQuerySet;

  @ffi.Uint32()
  external int timestampWriteCount;

  external ffi.Pointer<WGPURenderPassTimestampWrite> timestampWrites;
}

class WGPUVertexState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUShaderModule module;

  external ffi.Pointer<ffi.Int8> entryPoint;

  @ffi.Uint32()
  external int constantCount;

  external ffi.Pointer<WGPUConstantEntry> constants;

  @ffi.Uint32()
  external int bufferCount;

  external ffi.Pointer<WGPUVertexBufferLayout> buffers;
}

class WGPUFragmentState extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external WGPUShaderModule module;

  external ffi.Pointer<ffi.Int8> entryPoint;

  @ffi.Uint32()
  external int constantCount;

  external ffi.Pointer<WGPUConstantEntry> constants;

  @ffi.Uint32()
  external int targetCount;

  external ffi.Pointer<WGPUColorTargetState> targets;
}

class WGPURenderPipelineDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPUChainedStruct> nextInChain;

  external ffi.Pointer<ffi.Int8> label;

  external WGPUPipelineLayout layout;

  external WGPUVertexState vertex;

  external WGPUPrimitiveState primitive;

  external ffi.Pointer<WGPUDepthStencilState> depthStencil;

  external WGPUMultisampleState multisample;

  external ffi.Pointer<WGPUFragmentState> fragment;
}

typedef WGPUInstance = ffi.Pointer<WGPUInstanceImpl>;
typedef WGPUProc = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef WGPUDevice = ffi.Pointer<WGPUDeviceImpl>;
typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;
typedef WGPUAdapter = ffi.Pointer<WGPUAdapterImpl>;
typedef WGPURequestDeviceCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, WGPUDevice, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPUMapModeFlags = WGPUFlags;
typedef WGPUBufferMapCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef WGPUComputePassEncoder = ffi.Pointer<WGPUComputePassEncoderImpl>;
typedef WGPUCommandEncoder = ffi.Pointer<WGPUCommandEncoderImpl>;
typedef WGPURenderPassEncoder = ffi.Pointer<WGPURenderPassEncoderImpl>;
typedef WGPUCommandBuffer = ffi.Pointer<WGPUCommandBufferImpl>;
typedef WGPUBindGroup = ffi.Pointer<WGPUBindGroupImpl>;
typedef WGPUComputePipeline = ffi.Pointer<WGPUComputePipelineImpl>;
typedef WGPUCreateComputePipelineAsyncCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, WGPUComputePipeline, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPURenderBundleEncoder = ffi.Pointer<WGPURenderBundleEncoderImpl>;
typedef WGPURenderPipeline = ffi.Pointer<WGPURenderPipelineImpl>;
typedef WGPUCreateRenderPipelineAsyncCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, WGPURenderPipeline, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPUSwapChain = ffi.Pointer<WGPUSwapChainImpl>;
typedef WGPUQueue = ffi.Pointer<WGPUQueueImpl>;
typedef WGPUErrorCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;
typedef WGPUDeviceLostCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;
typedef WGPURequestAdapterCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, WGPUAdapter, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPUQueueWorkDoneCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef WGPURenderBundle = ffi.Pointer<WGPURenderBundleImpl>;
typedef WGPUCompilationInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, ffi.Pointer<WGPUCompilationInfo>,
            ffi.Pointer<ffi.Void>)>>;

abstract class WGPUNativeSType {
  static const int WGPUSType_DeviceExtras = 1610612737;
  static const int WGPUSType_AdapterExtras = 1610612738;
  static const int WGPUNativeSType_Force32 = 2147483647;
}

abstract class WGPUNativeFeature {
  static const int WGPUNativeFeature_TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES =
      268435456;
}

abstract class WGPULogLevel {
  static const int WGPULogLevel_Off = 0;
  static const int WGPULogLevel_Error = 1;
  static const int WGPULogLevel_Warn = 2;
  static const int WGPULogLevel_Info = 3;
  static const int WGPULogLevel_Debug = 4;
  static const int WGPULogLevel_Trace = 5;
  static const int WGPULogLevel_Force32 = 2147483647;
}

class WGPUAdapterExtras extends ffi.Struct {
  external WGPUChainedStruct chain;

  @ffi.Int32()
  external int backend;
}

class WGPUDeviceExtras extends ffi.Struct {
  external WGPUChainedStruct chain;

  @ffi.Int32()
  external int nativeFeatures;

  external ffi.Pointer<ffi.Int8> label;

  external ffi.Pointer<ffi.Int8> tracePath;
}

typedef WGPULogCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int WGPU_ARRAY_LAYER_COUNT_UNDEFINED = 4294967295;

const int WGPU_COPY_STRIDE_UNDEFINED = 4294967295;

const int WGPU_LIMIT_U32_UNDEFINED = 4294967295;

const int WGPU_LIMIT_U64_UNDEFINED = -1;

const int WGPU_MIP_LEVEL_COUNT_UNDEFINED = 4294967295;

const int WGPU_WHOLE_MAP_SIZE = -1;

const int WGPU_WHOLE_SIZE = -1;
